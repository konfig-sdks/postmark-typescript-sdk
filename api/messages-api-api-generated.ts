/* tslint:disable */
/* eslint-disable */
/*
Postmark API

Postmark makes sending and receiving email
incredibly easy.


The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { InboundSearchResponse } from '../models';
// @ts-ignore
import { OutboundSearchResponse } from '../models';
// @ts-ignore
import { StandardPostmarkResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * MessagesApiApi - axios parameter creator
 * @export
 */
export const MessagesApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Clicks for a all messages
         * @param {number} count Number of message clicks to return per request. Max 500.
         * @param {number} offset Number of messages to skip
         * @param {string} [recipient] Filter by To, Cc, Bcc
         * @param {string} [tag] Filter by tag
         * @param {string} [clientName] Filter by client name, i.e. Outlook, Gmail
         * @param {string} [clientCompany] Filter by company, i.e. Microsoft, Apple, Google
         * @param {string} [clientFamily] Filter by client family, i.e. OS X, Chrome
         * @param {string} [osName] Filter by full OS name and specific version, i.e. OS X 10.9 Mavericks, Windows 7
         * @param {string} [osFamily] Filter by kind of OS used without specific version, i.e. OS X, Windows
         * @param {string} [osCompany] Filter by company which produced the OS, i.e. Apple Computer, Inc., Microsoft Corporation
         * @param {string} [platform] Filter by platform, i.e. webmail, desktop, mobile
         * @param {string} [country] Filter by country messages were opened in, i.e. Denmark, Russia
         * @param {string} [region] Filter by full name of region messages were opened in, i.e. Moscow, New York
         * @param {string} [city] Filter by full name of region messages were opened in, i.e. Moscow, New York
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllClicks: async (count: number, offset: number, recipient?: string, tag?: string, clientName?: string, clientCompany?: string, clientFamily?: string, osName?: string, osFamily?: string, osCompany?: string, platform?: string, country?: string, region?: string, city?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'count' is not null or undefined
            assertParamExists('getAllClicks', 'count', count)
            // verify required parameter 'offset' is not null or undefined
            assertParamExists('getAllClicks', 'offset', offset)
            const localVarPath = `/messages/outbound/clicks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication serverToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Postmark-Server-Token", keyParamName: "serverToken", configuration })
            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (recipient !== undefined) {
                localVarQueryParameter['recipient'] = recipient;
            }

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (clientName !== undefined) {
                localVarQueryParameter['client_name'] = clientName;
            }

            if (clientCompany !== undefined) {
                localVarQueryParameter['client_company'] = clientCompany;
            }

            if (clientFamily !== undefined) {
                localVarQueryParameter['client_family'] = clientFamily;
            }

            if (osName !== undefined) {
                localVarQueryParameter['os_name'] = osName;
            }

            if (osFamily !== undefined) {
                localVarQueryParameter['os_family'] = osFamily;
            }

            if (osCompany !== undefined) {
                localVarQueryParameter['os_company'] = osCompany;
            }

            if (platform !== undefined) {
                localVarQueryParameter['platform'] = platform;
            }

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (region !== undefined) {
                localVarQueryParameter['region'] = region;
            }

            if (city !== undefined) {
                localVarQueryParameter['city'] = city;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/messages/outbound/clicks',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Inbound message details
         * @param {string} messageid The ID of the message for which to details will be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInboundMessageDetails: async (messageid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageid' is not null or undefined
            assertParamExists('getInboundMessageDetails', 'messageid', messageid)
            const localVarPath = `/messages/inbound/{messageid}/details`
                .replace(`{${"messageid"}}`, encodeURIComponent(String(messageid !== undefined ? messageid : `-messageid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication serverToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Postmark-Server-Token", keyParamName: "serverToken", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/messages/inbound/{messageid}/details',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Message Clicks
         * @param {string} messageid The ID of the Outbound Message for which click statistics should be retrieved.
         * @param {number} count Number of message clicks to return per request. Max 500.
         * @param {number} offset Number of messages to skip.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageClicks: async (messageid: string, count: number, offset: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageid' is not null or undefined
            assertParamExists('getMessageClicks', 'messageid', messageid)
            // verify required parameter 'count' is not null or undefined
            assertParamExists('getMessageClicks', 'count', count)
            // verify required parameter 'offset' is not null or undefined
            assertParamExists('getMessageClicks', 'offset', offset)
            const localVarPath = `/messages/outbound/clicks/{messageid}`
                .replace(`{${"messageid"}}`, encodeURIComponent(String(messageid !== undefined ? messageid : `-messageid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication serverToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Postmark-Server-Token", keyParamName: "serverToken", configuration })
            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/messages/outbound/clicks/{messageid}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Outbound message dump
         * @param {string} messageid The ID of the message for which to retrieve a dump.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageDump: async (messageid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageid' is not null or undefined
            assertParamExists('getMessageDump', 'messageid', messageid)
            const localVarPath = `/messages/outbound/{messageid}/dump`
                .replace(`{${"messageid"}}`, encodeURIComponent(String(messageid !== undefined ? messageid : `-messageid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication serverToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Postmark-Server-Token", keyParamName: "serverToken", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/messages/outbound/{messageid}/dump',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Message Opens
         * @param {string} messageid The ID of the Outbound Message for which open statistics should be retrieved.
         * @param {number} count Number of message opens to return per request. Max 500.
         * @param {number} offset Number of messages to skip.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageOpens: async (messageid: string, count: number, offset: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageid' is not null or undefined
            assertParamExists('getMessageOpens', 'messageid', messageid)
            // verify required parameter 'count' is not null or undefined
            assertParamExists('getMessageOpens', 'count', count)
            // verify required parameter 'offset' is not null or undefined
            assertParamExists('getMessageOpens', 'offset', offset)
            const localVarPath = `/messages/outbound/opens/{messageid}`
                .replace(`{${"messageid"}}`, encodeURIComponent(String(messageid !== undefined ? messageid : `-messageid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication serverToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Postmark-Server-Token", keyParamName: "serverToken", configuration })
            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/messages/outbound/opens/{messageid}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Outbound message details
         * @param {string} messageid The ID of the message for which to retrieve details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOutboundMessageDetails: async (messageid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageid' is not null or undefined
            assertParamExists('getOutboundMessageDetails', 'messageid', messageid)
            const localVarPath = `/messages/outbound/{messageid}/details`
                .replace(`{${"messageid"}}`, encodeURIComponent(String(messageid !== undefined ? messageid : `-messageid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication serverToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Postmark-Server-Token", keyParamName: "serverToken", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/messages/outbound/{messageid}/details',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Opens for all messages
         * @param {number} count Number of message opens to return per request. Max 500.
         * @param {number} offset Number of messages to skip
         * @param {string} [recipient] Filter by To, Cc, Bcc
         * @param {string} [tag] Filter by tag
         * @param {string} [clientName] Filter by client name, i.e. Outlook, Gmail
         * @param {string} [clientCompany] Filter by company, i.e. Microsoft, Apple, Google
         * @param {string} [clientFamily] Filter by client family, i.e. OS X, Chrome
         * @param {string} [osName] Filter by full OS name and specific version, i.e. OS X 10.9 Mavericks, Windows 7
         * @param {string} [osFamily] Filter by kind of OS used without specific version, i.e. OS X, Windows
         * @param {string} [osCompany] Filter by company which produced the OS, i.e. Apple Computer, Inc., Microsoft Corporation
         * @param {string} [platform] Filter by platform, i.e. webmail, desktop, mobile
         * @param {string} [country] Filter by country messages were opened in, i.e. Denmark, Russia
         * @param {string} [region] Filter by full name of region messages were opened in, i.e. Moscow, New York
         * @param {string} [city] Filter by full name of region messages were opened in, i.e. Moscow, New York
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOpensForOutbound: async (count: number, offset: number, recipient?: string, tag?: string, clientName?: string, clientCompany?: string, clientFamily?: string, osName?: string, osFamily?: string, osCompany?: string, platform?: string, country?: string, region?: string, city?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'count' is not null or undefined
            assertParamExists('listOpensForOutbound', 'count', count)
            // verify required parameter 'offset' is not null or undefined
            assertParamExists('listOpensForOutbound', 'offset', offset)
            const localVarPath = `/messages/outbound/opens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication serverToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Postmark-Server-Token", keyParamName: "serverToken", configuration })
            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (recipient !== undefined) {
                localVarQueryParameter['recipient'] = recipient;
            }

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (clientName !== undefined) {
                localVarQueryParameter['client_name'] = clientName;
            }

            if (clientCompany !== undefined) {
                localVarQueryParameter['client_company'] = clientCompany;
            }

            if (clientFamily !== undefined) {
                localVarQueryParameter['client_family'] = clientFamily;
            }

            if (osName !== undefined) {
                localVarQueryParameter['os_name'] = osName;
            }

            if (osFamily !== undefined) {
                localVarQueryParameter['os_family'] = osFamily;
            }

            if (osCompany !== undefined) {
                localVarQueryParameter['os_company'] = osCompany;
            }

            if (platform !== undefined) {
                localVarQueryParameter['platform'] = platform;
            }

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (region !== undefined) {
                localVarQueryParameter['region'] = region;
            }

            if (city !== undefined) {
                localVarQueryParameter['city'] = city;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/messages/outbound/opens',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retry a failed inbound message for processing
         * @param {string} messageid The ID of the inbound message on which we should retry processing.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retryInboundMessage: async (messageid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageid' is not null or undefined
            assertParamExists('retryInboundMessage', 'messageid', messageid)
            const localVarPath = `/messages/inbound/{messageid}/retry`
                .replace(`{${"messageid"}}`, encodeURIComponent(String(messageid !== undefined ? messageid : `-messageid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication serverToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Postmark-Server-Token", keyParamName: "serverToken", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/messages/inbound/{messageid}/retry',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Inbound message search
         * @param {number} count Number of messages to return per request. Max 500.
         * @param {number} offset Number of messages to skip
         * @param {string} [recipient] Filter by the user who was receiving the email
         * @param {string} [fromemail] Filter by the sender email address
         * @param {string} [subject] Filter by email subject
         * @param {string} [mailboxhash] Filter by mailboxhash
         * @param {string} [tag] Filter by tag
         * @param {'blocked' | 'processed' | 'queued' | 'failed' | 'scheduled'} [status] Filter by status (&#x60;blocked&#x60;, &#x60;processed&#x60;, &#x60;queued&#x60;, &#x60;failed&#x60;, &#x60;scheduled&#x60;)
         * @param {string | Date} [todate] Filter messages up to the date specified. e.g. &#x60;2014-02-01&#x60;
         * @param {string | Date} [fromdate] Filter messages starting from the date specified. e.g. &#x60;2014-02-01&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchInboundMessages: async (count: number, offset: number, recipient?: string, fromemail?: string, subject?: string, mailboxhash?: string, tag?: string, status?: 'blocked' | 'processed' | 'queued' | 'failed' | 'scheduled', todate?: string | Date, fromdate?: string | Date, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'count' is not null or undefined
            assertParamExists('searchInboundMessages', 'count', count)
            // verify required parameter 'offset' is not null or undefined
            assertParamExists('searchInboundMessages', 'offset', offset)
            const localVarPath = `/messages/inbound`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication serverToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Postmark-Server-Token", keyParamName: "serverToken", configuration })
            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (recipient !== undefined) {
                localVarQueryParameter['recipient'] = recipient;
            }

            if (fromemail !== undefined) {
                localVarQueryParameter['fromemail'] = fromemail;
            }

            if (subject !== undefined) {
                localVarQueryParameter['subject'] = subject;
            }

            if (mailboxhash !== undefined) {
                localVarQueryParameter['mailboxhash'] = mailboxhash;
            }

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (todate !== undefined) {
                localVarQueryParameter['todate'] = (todate as any instanceof Date) ?
                    (todate as any).toISOString().substr(0,10) :
                    todate;
            }

            if (fromdate !== undefined) {
                localVarQueryParameter['fromdate'] = (fromdate as any instanceof Date) ?
                    (fromdate as any).toISOString().substr(0,10) :
                    fromdate;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/messages/inbound',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Outbound message search
         * @param {number} count Number of messages to return per request. Max 500.
         * @param {number} offset Number of messages to skip
         * @param {string} [recipient] Filter by the user who was receiving the email
         * @param {string} [fromemail] Filter by the sender email address
         * @param {string} [tag] Filter by tag
         * @param {'queued' | 'sent'} [status] Filter by status (&#x60;queued&#x60; or &#x60;sent&#x60;)
         * @param {string | Date} [todate] Filter messages up to the date specified. e.g. &#x60;2014-02-01&#x60;
         * @param {string | Date} [fromdate] Filter messages starting from the date specified. e.g. &#x60;2014-02-01&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchOutboundMessages: async (count: number, offset: number, recipient?: string, fromemail?: string, tag?: string, status?: 'queued' | 'sent', todate?: string | Date, fromdate?: string | Date, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'count' is not null or undefined
            assertParamExists('searchOutboundMessages', 'count', count)
            // verify required parameter 'offset' is not null or undefined
            assertParamExists('searchOutboundMessages', 'offset', offset)
            const localVarPath = `/messages/outbound`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication serverToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Postmark-Server-Token", keyParamName: "serverToken", configuration })
            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (recipient !== undefined) {
                localVarQueryParameter['recipient'] = recipient;
            }

            if (fromemail !== undefined) {
                localVarQueryParameter['fromemail'] = fromemail;
            }

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (todate !== undefined) {
                localVarQueryParameter['todate'] = (todate as any instanceof Date) ?
                    (todate as any).toISOString().substr(0,10) :
                    todate;
            }

            if (fromdate !== undefined) {
                localVarQueryParameter['fromdate'] = (fromdate as any instanceof Date) ?
                    (fromdate as any).toISOString().substr(0,10) :
                    fromdate;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/messages/outbound',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Bypass rules for a blocked inbound message
         * @param {string} messageid The ID of the message which should bypass inbound rules.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBypassRulesForInboundMessage: async (messageid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageid' is not null or undefined
            assertParamExists('updateBypassRulesForInboundMessage', 'messageid', messageid)
            const localVarPath = `/messages/inbound/{messageid}/bypass`
                .replace(`{${"messageid"}}`, encodeURIComponent(String(messageid !== undefined ? messageid : `-messageid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication serverToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Postmark-Server-Token", keyParamName: "serverToken", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/messages/inbound/{messageid}/bypass',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MessagesApiApi - functional programming interface
 * @export
 */
export const MessagesApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MessagesApiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Clicks for a all messages
         * @param {MessagesApiApiGetAllClicksRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllClicks(requestParameters: MessagesApiApiGetAllClicksRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllClicks(requestParameters.count, requestParameters.offset, requestParameters.recipient, requestParameters.tag, requestParameters.clientName, requestParameters.clientCompany, requestParameters.clientFamily, requestParameters.osName, requestParameters.osFamily, requestParameters.osCompany, requestParameters.platform, requestParameters.country, requestParameters.region, requestParameters.city, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Inbound message details
         * @param {MessagesApiApiGetInboundMessageDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInboundMessageDetails(requestParameters: MessagesApiApiGetInboundMessageDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInboundMessageDetails(requestParameters.messageid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve Message Clicks
         * @param {MessagesApiApiGetMessageClicksRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMessageClicks(requestParameters: MessagesApiApiGetMessageClicksRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMessageClicks(requestParameters.messageid, requestParameters.count, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Outbound message dump
         * @param {MessagesApiApiGetMessageDumpRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMessageDump(requestParameters: MessagesApiApiGetMessageDumpRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMessageDump(requestParameters.messageid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve Message Opens
         * @param {MessagesApiApiGetMessageOpensRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMessageOpens(requestParameters: MessagesApiApiGetMessageOpensRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMessageOpens(requestParameters.messageid, requestParameters.count, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Outbound message details
         * @param {MessagesApiApiGetOutboundMessageDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOutboundMessageDetails(requestParameters: MessagesApiApiGetOutboundMessageDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOutboundMessageDetails(requestParameters.messageid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Opens for all messages
         * @param {MessagesApiApiListOpensForOutboundRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOpensForOutbound(requestParameters: MessagesApiApiListOpensForOutboundRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOpensForOutbound(requestParameters.count, requestParameters.offset, requestParameters.recipient, requestParameters.tag, requestParameters.clientName, requestParameters.clientCompany, requestParameters.clientFamily, requestParameters.osName, requestParameters.osFamily, requestParameters.osCompany, requestParameters.platform, requestParameters.country, requestParameters.region, requestParameters.city, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retry a failed inbound message for processing
         * @param {MessagesApiApiRetryInboundMessageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retryInboundMessage(requestParameters: MessagesApiApiRetryInboundMessageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StandardPostmarkResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retryInboundMessage(requestParameters.messageid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Inbound message search
         * @param {MessagesApiApiSearchInboundMessagesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchInboundMessages(requestParameters: MessagesApiApiSearchInboundMessagesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InboundSearchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchInboundMessages(requestParameters.count, requestParameters.offset, requestParameters.recipient, requestParameters.fromemail, requestParameters.subject, requestParameters.mailboxhash, requestParameters.tag, requestParameters.status, requestParameters.todate, requestParameters.fromdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Outbound message search
         * @param {MessagesApiApiSearchOutboundMessagesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchOutboundMessages(requestParameters: MessagesApiApiSearchOutboundMessagesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OutboundSearchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchOutboundMessages(requestParameters.count, requestParameters.offset, requestParameters.recipient, requestParameters.fromemail, requestParameters.tag, requestParameters.status, requestParameters.todate, requestParameters.fromdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Bypass rules for a blocked inbound message
         * @param {MessagesApiApiUpdateBypassRulesForInboundMessageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBypassRulesForInboundMessage(requestParameters: MessagesApiApiUpdateBypassRulesForInboundMessageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StandardPostmarkResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBypassRulesForInboundMessage(requestParameters.messageid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MessagesApiApi - factory interface
 * @export
 */
export const MessagesApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MessagesApiApiFp(configuration)
    return {
        /**
         * 
         * @summary Clicks for a all messages
         * @param {MessagesApiApiGetAllClicksRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllClicks(requestParameters: MessagesApiApiGetAllClicksRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getAllClicks(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Inbound message details
         * @param {MessagesApiApiGetInboundMessageDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInboundMessageDetails(requestParameters: MessagesApiApiGetInboundMessageDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getInboundMessageDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Message Clicks
         * @param {MessagesApiApiGetMessageClicksRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageClicks(requestParameters: MessagesApiApiGetMessageClicksRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getMessageClicks(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Outbound message dump
         * @param {MessagesApiApiGetMessageDumpRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageDump(requestParameters: MessagesApiApiGetMessageDumpRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getMessageDump(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Message Opens
         * @param {MessagesApiApiGetMessageOpensRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageOpens(requestParameters: MessagesApiApiGetMessageOpensRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getMessageOpens(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Outbound message details
         * @param {MessagesApiApiGetOutboundMessageDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOutboundMessageDetails(requestParameters: MessagesApiApiGetOutboundMessageDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getOutboundMessageDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Opens for all messages
         * @param {MessagesApiApiListOpensForOutboundRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOpensForOutbound(requestParameters: MessagesApiApiListOpensForOutboundRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.listOpensForOutbound(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retry a failed inbound message for processing
         * @param {MessagesApiApiRetryInboundMessageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retryInboundMessage(requestParameters: MessagesApiApiRetryInboundMessageRequest, options?: AxiosRequestConfig): AxiosPromise<StandardPostmarkResponse> {
            return localVarFp.retryInboundMessage(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Inbound message search
         * @param {MessagesApiApiSearchInboundMessagesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchInboundMessages(requestParameters: MessagesApiApiSearchInboundMessagesRequest, options?: AxiosRequestConfig): AxiosPromise<InboundSearchResponse> {
            return localVarFp.searchInboundMessages(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Outbound message search
         * @param {MessagesApiApiSearchOutboundMessagesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchOutboundMessages(requestParameters: MessagesApiApiSearchOutboundMessagesRequest, options?: AxiosRequestConfig): AxiosPromise<OutboundSearchResponse> {
            return localVarFp.searchOutboundMessages(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Bypass rules for a blocked inbound message
         * @param {MessagesApiApiUpdateBypassRulesForInboundMessageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBypassRulesForInboundMessage(requestParameters: MessagesApiApiUpdateBypassRulesForInboundMessageRequest, options?: AxiosRequestConfig): AxiosPromise<StandardPostmarkResponse> {
            return localVarFp.updateBypassRulesForInboundMessage(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAllClicks operation in MessagesApiApi.
 * @export
 * @interface MessagesApiApiGetAllClicksRequest
 */
export type MessagesApiApiGetAllClicksRequest = {
    
    /**
    * Number of message clicks to return per request. Max 500.
    * @type {number}
    * @memberof MessagesApiApiGetAllClicks
    */
    readonly count: number
    
    /**
    * Number of messages to skip
    * @type {number}
    * @memberof MessagesApiApiGetAllClicks
    */
    readonly offset: number
    
    /**
    * Filter by To, Cc, Bcc
    * @type {string}
    * @memberof MessagesApiApiGetAllClicks
    */
    readonly recipient?: string
    
    /**
    * Filter by tag
    * @type {string}
    * @memberof MessagesApiApiGetAllClicks
    */
    readonly tag?: string
    
    /**
    * Filter by client name, i.e. Outlook, Gmail
    * @type {string}
    * @memberof MessagesApiApiGetAllClicks
    */
    readonly clientName?: string
    
    /**
    * Filter by company, i.e. Microsoft, Apple, Google
    * @type {string}
    * @memberof MessagesApiApiGetAllClicks
    */
    readonly clientCompany?: string
    
    /**
    * Filter by client family, i.e. OS X, Chrome
    * @type {string}
    * @memberof MessagesApiApiGetAllClicks
    */
    readonly clientFamily?: string
    
    /**
    * Filter by full OS name and specific version, i.e. OS X 10.9 Mavericks, Windows 7
    * @type {string}
    * @memberof MessagesApiApiGetAllClicks
    */
    readonly osName?: string
    
    /**
    * Filter by kind of OS used without specific version, i.e. OS X, Windows
    * @type {string}
    * @memberof MessagesApiApiGetAllClicks
    */
    readonly osFamily?: string
    
    /**
    * Filter by company which produced the OS, i.e. Apple Computer, Inc., Microsoft Corporation
    * @type {string}
    * @memberof MessagesApiApiGetAllClicks
    */
    readonly osCompany?: string
    
    /**
    * Filter by platform, i.e. webmail, desktop, mobile
    * @type {string}
    * @memberof MessagesApiApiGetAllClicks
    */
    readonly platform?: string
    
    /**
    * Filter by country messages were opened in, i.e. Denmark, Russia
    * @type {string}
    * @memberof MessagesApiApiGetAllClicks
    */
    readonly country?: string
    
    /**
    * Filter by full name of region messages were opened in, i.e. Moscow, New York
    * @type {string}
    * @memberof MessagesApiApiGetAllClicks
    */
    readonly region?: string
    
    /**
    * Filter by full name of region messages were opened in, i.e. Moscow, New York
    * @type {string}
    * @memberof MessagesApiApiGetAllClicks
    */
    readonly city?: string
    
}

/**
 * Request parameters for getInboundMessageDetails operation in MessagesApiApi.
 * @export
 * @interface MessagesApiApiGetInboundMessageDetailsRequest
 */
export type MessagesApiApiGetInboundMessageDetailsRequest = {
    
    /**
    * The ID of the message for which to details will be retrieved.
    * @type {string}
    * @memberof MessagesApiApiGetInboundMessageDetails
    */
    readonly messageid: string
    
}

/**
 * Request parameters for getMessageClicks operation in MessagesApiApi.
 * @export
 * @interface MessagesApiApiGetMessageClicksRequest
 */
export type MessagesApiApiGetMessageClicksRequest = {
    
    /**
    * The ID of the Outbound Message for which click statistics should be retrieved.
    * @type {string}
    * @memberof MessagesApiApiGetMessageClicks
    */
    readonly messageid: string
    
    /**
    * Number of message clicks to return per request. Max 500.
    * @type {number}
    * @memberof MessagesApiApiGetMessageClicks
    */
    readonly count: number
    
    /**
    * Number of messages to skip.
    * @type {number}
    * @memberof MessagesApiApiGetMessageClicks
    */
    readonly offset: number
    
}

/**
 * Request parameters for getMessageDump operation in MessagesApiApi.
 * @export
 * @interface MessagesApiApiGetMessageDumpRequest
 */
export type MessagesApiApiGetMessageDumpRequest = {
    
    /**
    * The ID of the message for which to retrieve a dump.
    * @type {string}
    * @memberof MessagesApiApiGetMessageDump
    */
    readonly messageid: string
    
}

/**
 * Request parameters for getMessageOpens operation in MessagesApiApi.
 * @export
 * @interface MessagesApiApiGetMessageOpensRequest
 */
export type MessagesApiApiGetMessageOpensRequest = {
    
    /**
    * The ID of the Outbound Message for which open statistics should be retrieved.
    * @type {string}
    * @memberof MessagesApiApiGetMessageOpens
    */
    readonly messageid: string
    
    /**
    * Number of message opens to return per request. Max 500.
    * @type {number}
    * @memberof MessagesApiApiGetMessageOpens
    */
    readonly count: number
    
    /**
    * Number of messages to skip.
    * @type {number}
    * @memberof MessagesApiApiGetMessageOpens
    */
    readonly offset: number
    
}

/**
 * Request parameters for getOutboundMessageDetails operation in MessagesApiApi.
 * @export
 * @interface MessagesApiApiGetOutboundMessageDetailsRequest
 */
export type MessagesApiApiGetOutboundMessageDetailsRequest = {
    
    /**
    * The ID of the message for which to retrieve details.
    * @type {string}
    * @memberof MessagesApiApiGetOutboundMessageDetails
    */
    readonly messageid: string
    
}

/**
 * Request parameters for listOpensForOutbound operation in MessagesApiApi.
 * @export
 * @interface MessagesApiApiListOpensForOutboundRequest
 */
export type MessagesApiApiListOpensForOutboundRequest = {
    
    /**
    * Number of message opens to return per request. Max 500.
    * @type {number}
    * @memberof MessagesApiApiListOpensForOutbound
    */
    readonly count: number
    
    /**
    * Number of messages to skip
    * @type {number}
    * @memberof MessagesApiApiListOpensForOutbound
    */
    readonly offset: number
    
    /**
    * Filter by To, Cc, Bcc
    * @type {string}
    * @memberof MessagesApiApiListOpensForOutbound
    */
    readonly recipient?: string
    
    /**
    * Filter by tag
    * @type {string}
    * @memberof MessagesApiApiListOpensForOutbound
    */
    readonly tag?: string
    
    /**
    * Filter by client name, i.e. Outlook, Gmail
    * @type {string}
    * @memberof MessagesApiApiListOpensForOutbound
    */
    readonly clientName?: string
    
    /**
    * Filter by company, i.e. Microsoft, Apple, Google
    * @type {string}
    * @memberof MessagesApiApiListOpensForOutbound
    */
    readonly clientCompany?: string
    
    /**
    * Filter by client family, i.e. OS X, Chrome
    * @type {string}
    * @memberof MessagesApiApiListOpensForOutbound
    */
    readonly clientFamily?: string
    
    /**
    * Filter by full OS name and specific version, i.e. OS X 10.9 Mavericks, Windows 7
    * @type {string}
    * @memberof MessagesApiApiListOpensForOutbound
    */
    readonly osName?: string
    
    /**
    * Filter by kind of OS used without specific version, i.e. OS X, Windows
    * @type {string}
    * @memberof MessagesApiApiListOpensForOutbound
    */
    readonly osFamily?: string
    
    /**
    * Filter by company which produced the OS, i.e. Apple Computer, Inc., Microsoft Corporation
    * @type {string}
    * @memberof MessagesApiApiListOpensForOutbound
    */
    readonly osCompany?: string
    
    /**
    * Filter by platform, i.e. webmail, desktop, mobile
    * @type {string}
    * @memberof MessagesApiApiListOpensForOutbound
    */
    readonly platform?: string
    
    /**
    * Filter by country messages were opened in, i.e. Denmark, Russia
    * @type {string}
    * @memberof MessagesApiApiListOpensForOutbound
    */
    readonly country?: string
    
    /**
    * Filter by full name of region messages were opened in, i.e. Moscow, New York
    * @type {string}
    * @memberof MessagesApiApiListOpensForOutbound
    */
    readonly region?: string
    
    /**
    * Filter by full name of region messages were opened in, i.e. Moscow, New York
    * @type {string}
    * @memberof MessagesApiApiListOpensForOutbound
    */
    readonly city?: string
    
}

/**
 * Request parameters for retryInboundMessage operation in MessagesApiApi.
 * @export
 * @interface MessagesApiApiRetryInboundMessageRequest
 */
export type MessagesApiApiRetryInboundMessageRequest = {
    
    /**
    * The ID of the inbound message on which we should retry processing.
    * @type {string}
    * @memberof MessagesApiApiRetryInboundMessage
    */
    readonly messageid: string
    
}

/**
 * Request parameters for searchInboundMessages operation in MessagesApiApi.
 * @export
 * @interface MessagesApiApiSearchInboundMessagesRequest
 */
export type MessagesApiApiSearchInboundMessagesRequest = {
    
    /**
    * Number of messages to return per request. Max 500.
    * @type {number}
    * @memberof MessagesApiApiSearchInboundMessages
    */
    readonly count: number
    
    /**
    * Number of messages to skip
    * @type {number}
    * @memberof MessagesApiApiSearchInboundMessages
    */
    readonly offset: number
    
    /**
    * Filter by the user who was receiving the email
    * @type {string}
    * @memberof MessagesApiApiSearchInboundMessages
    */
    readonly recipient?: string
    
    /**
    * Filter by the sender email address
    * @type {string}
    * @memberof MessagesApiApiSearchInboundMessages
    */
    readonly fromemail?: string
    
    /**
    * Filter by email subject
    * @type {string}
    * @memberof MessagesApiApiSearchInboundMessages
    */
    readonly subject?: string
    
    /**
    * Filter by mailboxhash
    * @type {string}
    * @memberof MessagesApiApiSearchInboundMessages
    */
    readonly mailboxhash?: string
    
    /**
    * Filter by tag
    * @type {string}
    * @memberof MessagesApiApiSearchInboundMessages
    */
    readonly tag?: string
    
    /**
    * Filter by status (`blocked`, `processed`, `queued`, `failed`, `scheduled`)
    * @type {'blocked' | 'processed' | 'queued' | 'failed' | 'scheduled'}
    * @memberof MessagesApiApiSearchInboundMessages
    */
    readonly status?: 'blocked' | 'processed' | 'queued' | 'failed' | 'scheduled'
    
    /**
    * Filter messages up to the date specified. e.g. `2014-02-01`
    * @type {string | Date}
    * @memberof MessagesApiApiSearchInboundMessages
    */
    readonly todate?: string | Date
    
    /**
    * Filter messages starting from the date specified. e.g. `2014-02-01`
    * @type {string | Date}
    * @memberof MessagesApiApiSearchInboundMessages
    */
    readonly fromdate?: string | Date
    
}

/**
 * Request parameters for searchOutboundMessages operation in MessagesApiApi.
 * @export
 * @interface MessagesApiApiSearchOutboundMessagesRequest
 */
export type MessagesApiApiSearchOutboundMessagesRequest = {
    
    /**
    * Number of messages to return per request. Max 500.
    * @type {number}
    * @memberof MessagesApiApiSearchOutboundMessages
    */
    readonly count: number
    
    /**
    * Number of messages to skip
    * @type {number}
    * @memberof MessagesApiApiSearchOutboundMessages
    */
    readonly offset: number
    
    /**
    * Filter by the user who was receiving the email
    * @type {string}
    * @memberof MessagesApiApiSearchOutboundMessages
    */
    readonly recipient?: string
    
    /**
    * Filter by the sender email address
    * @type {string}
    * @memberof MessagesApiApiSearchOutboundMessages
    */
    readonly fromemail?: string
    
    /**
    * Filter by tag
    * @type {string}
    * @memberof MessagesApiApiSearchOutboundMessages
    */
    readonly tag?: string
    
    /**
    * Filter by status (`queued` or `sent`)
    * @type {'queued' | 'sent'}
    * @memberof MessagesApiApiSearchOutboundMessages
    */
    readonly status?: 'queued' | 'sent'
    
    /**
    * Filter messages up to the date specified. e.g. `2014-02-01`
    * @type {string | Date}
    * @memberof MessagesApiApiSearchOutboundMessages
    */
    readonly todate?: string | Date
    
    /**
    * Filter messages starting from the date specified. e.g. `2014-02-01`
    * @type {string | Date}
    * @memberof MessagesApiApiSearchOutboundMessages
    */
    readonly fromdate?: string | Date
    
}

/**
 * Request parameters for updateBypassRulesForInboundMessage operation in MessagesApiApi.
 * @export
 * @interface MessagesApiApiUpdateBypassRulesForInboundMessageRequest
 */
export type MessagesApiApiUpdateBypassRulesForInboundMessageRequest = {
    
    /**
    * The ID of the message which should bypass inbound rules.
    * @type {string}
    * @memberof MessagesApiApiUpdateBypassRulesForInboundMessage
    */
    readonly messageid: string
    
}

/**
 * MessagesApiApiGenerated - object-oriented interface
 * @export
 * @class MessagesApiApiGenerated
 * @extends {BaseAPI}
 */
export class MessagesApiApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Clicks for a all messages
     * @param {MessagesApiApiGetAllClicksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApiApiGenerated
     */
    public getAllClicks(requestParameters: MessagesApiApiGetAllClicksRequest, options?: AxiosRequestConfig) {
        return MessagesApiApiFp(this.configuration).getAllClicks(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Inbound message details
     * @param {MessagesApiApiGetInboundMessageDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApiApiGenerated
     */
    public getInboundMessageDetails(requestParameters: MessagesApiApiGetInboundMessageDetailsRequest, options?: AxiosRequestConfig) {
        return MessagesApiApiFp(this.configuration).getInboundMessageDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Message Clicks
     * @param {MessagesApiApiGetMessageClicksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApiApiGenerated
     */
    public getMessageClicks(requestParameters: MessagesApiApiGetMessageClicksRequest, options?: AxiosRequestConfig) {
        return MessagesApiApiFp(this.configuration).getMessageClicks(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Outbound message dump
     * @param {MessagesApiApiGetMessageDumpRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApiApiGenerated
     */
    public getMessageDump(requestParameters: MessagesApiApiGetMessageDumpRequest, options?: AxiosRequestConfig) {
        return MessagesApiApiFp(this.configuration).getMessageDump(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Message Opens
     * @param {MessagesApiApiGetMessageOpensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApiApiGenerated
     */
    public getMessageOpens(requestParameters: MessagesApiApiGetMessageOpensRequest, options?: AxiosRequestConfig) {
        return MessagesApiApiFp(this.configuration).getMessageOpens(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Outbound message details
     * @param {MessagesApiApiGetOutboundMessageDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApiApiGenerated
     */
    public getOutboundMessageDetails(requestParameters: MessagesApiApiGetOutboundMessageDetailsRequest, options?: AxiosRequestConfig) {
        return MessagesApiApiFp(this.configuration).getOutboundMessageDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Opens for all messages
     * @param {MessagesApiApiListOpensForOutboundRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApiApiGenerated
     */
    public listOpensForOutbound(requestParameters: MessagesApiApiListOpensForOutboundRequest, options?: AxiosRequestConfig) {
        return MessagesApiApiFp(this.configuration).listOpensForOutbound(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retry a failed inbound message for processing
     * @param {MessagesApiApiRetryInboundMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApiApiGenerated
     */
    public retryInboundMessage(requestParameters: MessagesApiApiRetryInboundMessageRequest, options?: AxiosRequestConfig) {
        return MessagesApiApiFp(this.configuration).retryInboundMessage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Inbound message search
     * @param {MessagesApiApiSearchInboundMessagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApiApiGenerated
     */
    public searchInboundMessages(requestParameters: MessagesApiApiSearchInboundMessagesRequest, options?: AxiosRequestConfig) {
        return MessagesApiApiFp(this.configuration).searchInboundMessages(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Outbound message search
     * @param {MessagesApiApiSearchOutboundMessagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApiApiGenerated
     */
    public searchOutboundMessages(requestParameters: MessagesApiApiSearchOutboundMessagesRequest, options?: AxiosRequestConfig) {
        return MessagesApiApiFp(this.configuration).searchOutboundMessages(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Bypass rules for a blocked inbound message
     * @param {MessagesApiApiUpdateBypassRulesForInboundMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApiApiGenerated
     */
    public updateBypassRulesForInboundMessage(requestParameters: MessagesApiApiUpdateBypassRulesForInboundMessageRequest, options?: AxiosRequestConfig) {
        return MessagesApiApiFp(this.configuration).updateBypassRulesForInboundMessage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
