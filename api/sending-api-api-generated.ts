/* tslint:disable */
/* eslint-disable */
/*
Postmark API

Postmark makes sending and receiving email
incredibly easy.


The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Attachment } from '../models';
// @ts-ignore
import { EmailWithTemplateRequest } from '../models';
// @ts-ignore
import { MessageHeader } from '../models';
// @ts-ignore
import { SendEmailRequest } from '../models';
// @ts-ignore
import { SendEmailResponse } from '../models';
// @ts-ignore
import { SendEmailTemplatedBatchRequest } from '../models';
// @ts-ignore
import { StandardPostmarkResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SendingApiApi - axios parameter creator
 * @export
 */
export const SendingApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Send a batch of emails
         * @param {Array<SendEmailRequest>} [sendEmailRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendBatchEmails: async (sendEmailRequest?: Array<SendEmailRequest>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/email/batch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication serverToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Postmark-Server-Token", keyParamName: "serverToken", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: sendEmailRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/email/batch',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(sendEmailRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send a batch of email using templates.
         * @param {SendEmailTemplatedBatchRequest} sendEmailTemplatedBatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendBatchWithTemplates: async (sendEmailTemplatedBatchRequest: SendEmailTemplatedBatchRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sendEmailTemplatedBatchRequest' is not null or undefined
            assertParamExists('sendBatchWithTemplates', 'sendEmailTemplatedBatchRequest', sendEmailTemplatedBatchRequest)
            const localVarPath = `/email/batchWithTemplates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication serverToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Postmark-Server-Token", keyParamName: "serverToken", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: sendEmailTemplatedBatchRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/email/batchWithTemplates',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(sendEmailTemplatedBatchRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send an email using a Template
         * @param {EmailWithTemplateRequest} emailWithTemplateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEmailTemplate: async (emailWithTemplateRequest: EmailWithTemplateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'emailWithTemplateRequest' is not null or undefined
            assertParamExists('sendEmailTemplate', 'emailWithTemplateRequest', emailWithTemplateRequest)
            const localVarPath = `/email/withTemplate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication serverToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Postmark-Server-Token", keyParamName: "serverToken", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: emailWithTemplateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/email/withTemplate',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(emailWithTemplateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send a single email
         * @param {SendEmailRequest} [sendEmailRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendSingleEmail: async (sendEmailRequest?: SendEmailRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication serverToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Postmark-Server-Token", keyParamName: "serverToken", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: sendEmailRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/email',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(sendEmailRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SendingApiApi - functional programming interface
 * @export
 */
export const SendingApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SendingApiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Send a batch of emails
         * @param {SendingApiApiSendBatchEmailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendBatchEmails(requestParameters: SendingApiApiSendBatchEmailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SendEmailResponse>>> {
            const sendEmailRequest: Array<SendEmailRequest> = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendBatchEmails(sendEmailRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Send a batch of email using templates.
         * @param {SendingApiApiSendBatchWithTemplatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendBatchWithTemplates(requestParameters: SendingApiApiSendBatchWithTemplatesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SendEmailResponse>>> {
            const sendEmailTemplatedBatchRequest: SendEmailTemplatedBatchRequest = {
                Messages: requestParameters.Messages
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendBatchWithTemplates(sendEmailTemplatedBatchRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Send an email using a Template
         * @param {SendingApiApiSendEmailTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendEmailTemplate(requestParameters: SendingApiApiSendEmailTemplateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SendEmailResponse>> {
            const emailWithTemplateRequest: EmailWithTemplateRequest = {
                Attachments: requestParameters.Attachments,
                Bcc: requestParameters.Bcc,
                Cc: requestParameters.Cc,
                From: requestParameters.From,
                Headers: requestParameters.Headers,
                InlineCss: requestParameters.InlineCss,
                ReplyTo: requestParameters.ReplyTo,
                Tag: requestParameters.Tag,
                TemplateAlias: requestParameters.TemplateAlias,
                TemplateId: requestParameters.TemplateId,
                TemplateModel: requestParameters.TemplateModel,
                To: requestParameters.To,
                TrackLinks: requestParameters.TrackLinks,
                TrackOpens: requestParameters.TrackOpens
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendEmailTemplate(emailWithTemplateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Send a single email
         * @param {SendingApiApiSendSingleEmailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendSingleEmail(requestParameters: SendingApiApiSendSingleEmailRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SendEmailResponse>> {
            const sendEmailRequest: SendEmailRequest = {
                Attachments: requestParameters.Attachments,
                Bcc: requestParameters.Bcc,
                Cc: requestParameters.Cc,
                From: requestParameters.From,
                Headers: requestParameters.Headers,
                HtmlBody: requestParameters.HtmlBody,
                ReplyTo: requestParameters.ReplyTo,
                Subject: requestParameters.Subject,
                Tag: requestParameters.Tag,
                TextBody: requestParameters.TextBody,
                To: requestParameters.To,
                TrackLinks: requestParameters.TrackLinks,
                TrackOpens: requestParameters.TrackOpens
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendSingleEmail(sendEmailRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SendingApiApi - factory interface
 * @export
 */
export const SendingApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SendingApiApiFp(configuration)
    return {
        /**
         * 
         * @summary Send a batch of emails
         * @param {SendingApiApiSendBatchEmailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendBatchEmails(requestParameters: SendingApiApiSendBatchEmailsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<SendEmailResponse>> {
            return localVarFp.sendBatchEmails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send a batch of email using templates.
         * @param {SendingApiApiSendBatchWithTemplatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendBatchWithTemplates(requestParameters: SendingApiApiSendBatchWithTemplatesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<SendEmailResponse>> {
            return localVarFp.sendBatchWithTemplates(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send an email using a Template
         * @param {SendingApiApiSendEmailTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEmailTemplate(requestParameters: SendingApiApiSendEmailTemplateRequest, options?: AxiosRequestConfig): AxiosPromise<SendEmailResponse> {
            return localVarFp.sendEmailTemplate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send a single email
         * @param {SendingApiApiSendSingleEmailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendSingleEmail(requestParameters: SendingApiApiSendSingleEmailRequest = {}, options?: AxiosRequestConfig): AxiosPromise<SendEmailResponse> {
            return localVarFp.sendSingleEmail(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for sendBatchEmails operation in SendingApiApi.
 * @export
 * @interface SendingApiApiSendBatchEmailsRequest
 */
export type SendingApiApiSendBatchEmailsRequest = Array<SendEmailRequest>

/**
 * Request parameters for sendBatchWithTemplates operation in SendingApiApi.
 * @export
 * @interface SendingApiApiSendBatchWithTemplatesRequest
 */
export type SendingApiApiSendBatchWithTemplatesRequest = {
    
} & SendEmailTemplatedBatchRequest

/**
 * Request parameters for sendEmailTemplate operation in SendingApiApi.
 * @export
 * @interface SendingApiApiSendEmailTemplateRequest
 */
export type SendingApiApiSendEmailTemplateRequest = {
    
} & EmailWithTemplateRequest

/**
 * Request parameters for sendSingleEmail operation in SendingApiApi.
 * @export
 * @interface SendingApiApiSendSingleEmailRequest
 */
export type SendingApiApiSendSingleEmailRequest = {
    
} & SendEmailRequest

/**
 * SendingApiApiGenerated - object-oriented interface
 * @export
 * @class SendingApiApiGenerated
 * @extends {BaseAPI}
 */
export class SendingApiApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Send a batch of emails
     * @param {SendingApiApiSendBatchEmailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SendingApiApiGenerated
     */
    public sendBatchEmails(requestParameters: SendingApiApiSendBatchEmailsRequest, options?: AxiosRequestConfig) {
        return SendingApiApiFp(this.configuration).sendBatchEmails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send a batch of email using templates.
     * @param {SendingApiApiSendBatchWithTemplatesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SendingApiApiGenerated
     */
    public sendBatchWithTemplates(requestParameters: SendingApiApiSendBatchWithTemplatesRequest, options?: AxiosRequestConfig) {
        return SendingApiApiFp(this.configuration).sendBatchWithTemplates(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send an email using a Template
     * @param {SendingApiApiSendEmailTemplateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SendingApiApiGenerated
     */
    public sendEmailTemplate(requestParameters: SendingApiApiSendEmailTemplateRequest, options?: AxiosRequestConfig) {
        return SendingApiApiFp(this.configuration).sendEmailTemplate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send a single email
     * @param {SendingApiApiSendSingleEmailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SendingApiApiGenerated
     */
    public sendSingleEmail(requestParameters: SendingApiApiSendSingleEmailRequest = {}, options?: AxiosRequestConfig) {
        return SendingApiApiFp(this.configuration).sendSingleEmail(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
