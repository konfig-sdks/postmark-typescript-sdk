/* tslint:disable */
/* eslint-disable */
/*
Postmark API

Postmark makes sending and receiving email
incredibly easy.


The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BounceSearchResponse } from '../models';
// @ts-ignore
import { DeliveryStatsResponse } from '../models';
// @ts-ignore
import { StandardPostmarkResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * BouncesApiApi - axios parameter creator
 * @export
 */
export const BouncesApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Activate a bounce
         * @param {number} bounceid The ID of the Bounce to activate.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activateBounce: async (bounceid: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bounceid' is not null or undefined
            assertParamExists('activateBounce', 'bounceid', bounceid)
            const localVarPath = `/bounces/{bounceid}/activate`
                .replace(`{${"bounceid"}}`, encodeURIComponent(String(bounceid !== undefined ? bounceid : `-bounceid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication serverToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Postmark-Server-Token", keyParamName: "serverToken", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/bounces/{bounceid}/activate',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a single bounce
         * @param {number} bounceid The ID of the bounce to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBounce: async (bounceid: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bounceid' is not null or undefined
            assertParamExists('getBounce', 'bounceid', bounceid)
            const localVarPath = `/bounces/{bounceid}`
                .replace(`{${"bounceid"}}`, encodeURIComponent(String(bounceid !== undefined ? bounceid : `-bounceid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication serverToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Postmark-Server-Token", keyParamName: "serverToken", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/bounces/{bounceid}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get delivery stats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeliveryStats: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/deliverystats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication serverToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Postmark-Server-Token", keyParamName: "serverToken", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/deliverystats',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get bounce dump
         * @param {number} bounceid The ID for the bounce dump to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDump: async (bounceid: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bounceid' is not null or undefined
            assertParamExists('getDump', 'bounceid', bounceid)
            const localVarPath = `/bounces/{bounceid}/dump`
                .replace(`{${"bounceid"}}`, encodeURIComponent(String(bounceid !== undefined ? bounceid : `-bounceid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication serverToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Postmark-Server-Token", keyParamName: "serverToken", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/bounces/{bounceid}/dump',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get bounces
         * @param {number} count Number of bounces to return per request. Max 500.
         * @param {number} offset Number of bounces to skip.
         * @param {'HardBounce' | 'Transient' | 'Unsubscribe' | 'Subscribe' | 'AutoResponder' | 'AddressChange' | 'DnsError' | 'SpamNotification' | 'OpenRelayTest' | 'Unknown' | 'SoftBounce' | 'VirusNotification' | 'MailFrontier Matador.' | 'BadEmailAddress' | 'SpamComplaint' | 'ManuallyDeactivated' | 'Unconfirmed' | 'Blocked' | 'SMTPApiError' | 'InboundError' | 'DMARCPolicy' | 'TemplateRenderingFailed'} [type] Filter by type of bounce
         * @param {boolean} [inactive] Filter by emails that were deactivated by Postmark due to the bounce. Set to true or false. If this isn\&#39;t specified it will return both active and inactive.
         * @param {string} [emailFilter] Filter by email address
         * @param {string} [messageID] Filter by messageID
         * @param {string} [tag] Filter by tag
         * @param {string | Date} [todate] Filter messages up to the date specified. e.g. &#x60;2014-02-01&#x60;
         * @param {string | Date} [fromdate] Filter messages starting from the date specified. e.g. &#x60;2014-02-01&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBounces: async (count: number, offset: number, type?: 'HardBounce' | 'Transient' | 'Unsubscribe' | 'Subscribe' | 'AutoResponder' | 'AddressChange' | 'DnsError' | 'SpamNotification' | 'OpenRelayTest' | 'Unknown' | 'SoftBounce' | 'VirusNotification' | 'MailFrontier Matador.' | 'BadEmailAddress' | 'SpamComplaint' | 'ManuallyDeactivated' | 'Unconfirmed' | 'Blocked' | 'SMTPApiError' | 'InboundError' | 'DMARCPolicy' | 'TemplateRenderingFailed', inactive?: boolean, emailFilter?: string, messageID?: string, tag?: string, todate?: string | Date, fromdate?: string | Date, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'count' is not null or undefined
            assertParamExists('listBounces', 'count', count)
            // verify required parameter 'offset' is not null or undefined
            assertParamExists('listBounces', 'offset', offset)
            const localVarPath = `/bounces`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication serverToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Postmark-Server-Token", keyParamName: "serverToken", configuration })
            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (inactive !== undefined) {
                localVarQueryParameter['inactive'] = inactive;
            }

            if (emailFilter !== undefined) {
                localVarQueryParameter['emailFilter'] = emailFilter;
            }

            if (messageID !== undefined) {
                localVarQueryParameter['messageID'] = messageID;
            }

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (todate !== undefined) {
                localVarQueryParameter['todate'] = (todate as any instanceof Date) ?
                    (todate as any).toISOString().substr(0,10) :
                    todate;
            }

            if (fromdate !== undefined) {
                localVarQueryParameter['fromdate'] = (fromdate as any instanceof Date) ?
                    (fromdate as any).toISOString().substr(0,10) :
                    fromdate;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/bounces',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BouncesApiApi - functional programming interface
 * @export
 */
export const BouncesApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BouncesApiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Activate a bounce
         * @param {BouncesApiApiActivateBounceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activateBounce(requestParameters: BouncesApiApiActivateBounceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.activateBounce(requestParameters.bounceid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a single bounce
         * @param {BouncesApiApiGetBounceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBounce(requestParameters: BouncesApiApiGetBounceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBounce(requestParameters.bounceid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get delivery stats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeliveryStats(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeliveryStatsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeliveryStats(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get bounce dump
         * @param {BouncesApiApiGetDumpRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDump(requestParameters: BouncesApiApiGetDumpRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDump(requestParameters.bounceid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get bounces
         * @param {BouncesApiApiListBouncesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listBounces(requestParameters: BouncesApiApiListBouncesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BounceSearchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listBounces(requestParameters.count, requestParameters.offset, requestParameters.type, requestParameters.inactive, requestParameters.emailFilter, requestParameters.messageID, requestParameters.tag, requestParameters.todate, requestParameters.fromdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BouncesApiApi - factory interface
 * @export
 */
export const BouncesApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BouncesApiApiFp(configuration)
    return {
        /**
         * 
         * @summary Activate a bounce
         * @param {BouncesApiApiActivateBounceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activateBounce(requestParameters: BouncesApiApiActivateBounceRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.activateBounce(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a single bounce
         * @param {BouncesApiApiGetBounceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBounce(requestParameters: BouncesApiApiGetBounceRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getBounce(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get delivery stats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeliveryStats(options?: AxiosRequestConfig): AxiosPromise<DeliveryStatsResponse> {
            return localVarFp.getDeliveryStats(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get bounce dump
         * @param {BouncesApiApiGetDumpRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDump(requestParameters: BouncesApiApiGetDumpRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getDump(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get bounces
         * @param {BouncesApiApiListBouncesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBounces(requestParameters: BouncesApiApiListBouncesRequest, options?: AxiosRequestConfig): AxiosPromise<BounceSearchResponse> {
            return localVarFp.listBounces(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for activateBounce operation in BouncesApiApi.
 * @export
 * @interface BouncesApiApiActivateBounceRequest
 */
export type BouncesApiApiActivateBounceRequest = {
    
    /**
    * The ID of the Bounce to activate.
    * @type {number}
    * @memberof BouncesApiApiActivateBounce
    */
    readonly bounceid: number
    
}

/**
 * Request parameters for getBounce operation in BouncesApiApi.
 * @export
 * @interface BouncesApiApiGetBounceRequest
 */
export type BouncesApiApiGetBounceRequest = {
    
    /**
    * The ID of the bounce to retrieve.
    * @type {number}
    * @memberof BouncesApiApiGetBounce
    */
    readonly bounceid: number
    
}

/**
 * Request parameters for getDump operation in BouncesApiApi.
 * @export
 * @interface BouncesApiApiGetDumpRequest
 */
export type BouncesApiApiGetDumpRequest = {
    
    /**
    * The ID for the bounce dump to retrieve.
    * @type {number}
    * @memberof BouncesApiApiGetDump
    */
    readonly bounceid: number
    
}

/**
 * Request parameters for listBounces operation in BouncesApiApi.
 * @export
 * @interface BouncesApiApiListBouncesRequest
 */
export type BouncesApiApiListBouncesRequest = {
    
    /**
    * Number of bounces to return per request. Max 500.
    * @type {number}
    * @memberof BouncesApiApiListBounces
    */
    readonly count: number
    
    /**
    * Number of bounces to skip.
    * @type {number}
    * @memberof BouncesApiApiListBounces
    */
    readonly offset: number
    
    /**
    * Filter by type of bounce
    * @type {'HardBounce' | 'Transient' | 'Unsubscribe' | 'Subscribe' | 'AutoResponder' | 'AddressChange' | 'DnsError' | 'SpamNotification' | 'OpenRelayTest' | 'Unknown' | 'SoftBounce' | 'VirusNotification' | 'MailFrontier Matador.' | 'BadEmailAddress' | 'SpamComplaint' | 'ManuallyDeactivated' | 'Unconfirmed' | 'Blocked' | 'SMTPApiError' | 'InboundError' | 'DMARCPolicy' | 'TemplateRenderingFailed'}
    * @memberof BouncesApiApiListBounces
    */
    readonly type?: 'HardBounce' | 'Transient' | 'Unsubscribe' | 'Subscribe' | 'AutoResponder' | 'AddressChange' | 'DnsError' | 'SpamNotification' | 'OpenRelayTest' | 'Unknown' | 'SoftBounce' | 'VirusNotification' | 'MailFrontier Matador.' | 'BadEmailAddress' | 'SpamComplaint' | 'ManuallyDeactivated' | 'Unconfirmed' | 'Blocked' | 'SMTPApiError' | 'InboundError' | 'DMARCPolicy' | 'TemplateRenderingFailed'
    
    /**
    * Filter by emails that were deactivated by Postmark due to the bounce. Set to true or false. If this isn\'t specified it will return both active and inactive.
    * @type {boolean}
    * @memberof BouncesApiApiListBounces
    */
    readonly inactive?: boolean
    
    /**
    * Filter by email address
    * @type {string}
    * @memberof BouncesApiApiListBounces
    */
    readonly emailFilter?: string
    
    /**
    * Filter by messageID
    * @type {string}
    * @memberof BouncesApiApiListBounces
    */
    readonly messageID?: string
    
    /**
    * Filter by tag
    * @type {string}
    * @memberof BouncesApiApiListBounces
    */
    readonly tag?: string
    
    /**
    * Filter messages up to the date specified. e.g. `2014-02-01`
    * @type {string | Date}
    * @memberof BouncesApiApiListBounces
    */
    readonly todate?: string | Date
    
    /**
    * Filter messages starting from the date specified. e.g. `2014-02-01`
    * @type {string | Date}
    * @memberof BouncesApiApiListBounces
    */
    readonly fromdate?: string | Date
    
}

/**
 * BouncesApiApiGenerated - object-oriented interface
 * @export
 * @class BouncesApiApiGenerated
 * @extends {BaseAPI}
 */
export class BouncesApiApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Activate a bounce
     * @param {BouncesApiApiActivateBounceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BouncesApiApiGenerated
     */
    public activateBounce(requestParameters: BouncesApiApiActivateBounceRequest, options?: AxiosRequestConfig) {
        return BouncesApiApiFp(this.configuration).activateBounce(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a single bounce
     * @param {BouncesApiApiGetBounceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BouncesApiApiGenerated
     */
    public getBounce(requestParameters: BouncesApiApiGetBounceRequest, options?: AxiosRequestConfig) {
        return BouncesApiApiFp(this.configuration).getBounce(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get delivery stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BouncesApiApiGenerated
     */
    public getDeliveryStats(options?: AxiosRequestConfig) {
        return BouncesApiApiFp(this.configuration).getDeliveryStats(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get bounce dump
     * @param {BouncesApiApiGetDumpRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BouncesApiApiGenerated
     */
    public getDump(requestParameters: BouncesApiApiGetDumpRequest, options?: AxiosRequestConfig) {
        return BouncesApiApiFp(this.configuration).getDump(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get bounces
     * @param {BouncesApiApiListBouncesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BouncesApiApiGenerated
     */
    public listBounces(requestParameters: BouncesApiApiListBouncesRequest, options?: AxiosRequestConfig) {
        return BouncesApiApiFp(this.configuration).listBounces(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
