/* tslint:disable */
/* eslint-disable */
/*
Postmark API

Postmark makes sending and receiving email
incredibly easy.


The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateInboundRuleRequest } from '../models';
// @ts-ignore
import { StandardPostmarkResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * InboundRulesApiApi - axios parameter creator
 * @export
 */
export const InboundRulesApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create an inbound rule trigger
         * @param {CreateInboundRuleRequest} [createInboundRuleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTrigger: async (createInboundRuleRequest?: CreateInboundRuleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/triggers/inboundrules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication serverToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Postmark-Server-Token", keyParamName: "serverToken", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createInboundRuleRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/triggers/inboundrules',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createInboundRuleRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a single trigger
         * @param {number} triggerid The ID of the Inbound Rule that should be deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSingleTrigger: async (triggerid: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'triggerid' is not null or undefined
            assertParamExists('deleteSingleTrigger', 'triggerid', triggerid)
            const localVarPath = `/triggers/inboundrules/{triggerid}`
                .replace(`{${"triggerid"}}`, encodeURIComponent(String(triggerid !== undefined ? triggerid : `-triggerid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication serverToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Postmark-Server-Token", keyParamName: "serverToken", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/triggers/inboundrules/{triggerid}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List inbound rule triggers
         * @param {number} count Number of records to return per request.
         * @param {number} offset Number of records to skip.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTriggers: async (count: number, offset: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'count' is not null or undefined
            assertParamExists('listTriggers', 'count', count)
            // verify required parameter 'offset' is not null or undefined
            assertParamExists('listTriggers', 'offset', offset)
            const localVarPath = `/triggers/inboundrules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication serverToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Postmark-Server-Token", keyParamName: "serverToken", configuration })
            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/triggers/inboundrules',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InboundRulesApiApi - functional programming interface
 * @export
 */
export const InboundRulesApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InboundRulesApiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create an inbound rule trigger
         * @param {InboundRulesApiApiCreateTriggerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTrigger(requestParameters: InboundRulesApiApiCreateTriggerRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const createInboundRuleRequest: CreateInboundRuleRequest = {
                Rule: requestParameters.Rule
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTrigger(createInboundRuleRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a single trigger
         * @param {InboundRulesApiApiDeleteSingleTriggerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSingleTrigger(requestParameters: InboundRulesApiApiDeleteSingleTriggerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StandardPostmarkResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSingleTrigger(requestParameters.triggerid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List inbound rule triggers
         * @param {InboundRulesApiApiListTriggersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTriggers(requestParameters: InboundRulesApiApiListTriggersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTriggers(requestParameters.count, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InboundRulesApiApi - factory interface
 * @export
 */
export const InboundRulesApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InboundRulesApiApiFp(configuration)
    return {
        /**
         * 
         * @summary Create an inbound rule trigger
         * @param {InboundRulesApiApiCreateTriggerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTrigger(requestParameters: InboundRulesApiApiCreateTriggerRequest = {}, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.createTrigger(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a single trigger
         * @param {InboundRulesApiApiDeleteSingleTriggerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSingleTrigger(requestParameters: InboundRulesApiApiDeleteSingleTriggerRequest, options?: AxiosRequestConfig): AxiosPromise<StandardPostmarkResponse> {
            return localVarFp.deleteSingleTrigger(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List inbound rule triggers
         * @param {InboundRulesApiApiListTriggersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTriggers(requestParameters: InboundRulesApiApiListTriggersRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.listTriggers(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createTrigger operation in InboundRulesApiApi.
 * @export
 * @interface InboundRulesApiApiCreateTriggerRequest
 */
export type InboundRulesApiApiCreateTriggerRequest = {
    
} & CreateInboundRuleRequest

/**
 * Request parameters for deleteSingleTrigger operation in InboundRulesApiApi.
 * @export
 * @interface InboundRulesApiApiDeleteSingleTriggerRequest
 */
export type InboundRulesApiApiDeleteSingleTriggerRequest = {
    
    /**
    * The ID of the Inbound Rule that should be deleted.
    * @type {number}
    * @memberof InboundRulesApiApiDeleteSingleTrigger
    */
    readonly triggerid: number
    
}

/**
 * Request parameters for listTriggers operation in InboundRulesApiApi.
 * @export
 * @interface InboundRulesApiApiListTriggersRequest
 */
export type InboundRulesApiApiListTriggersRequest = {
    
    /**
    * Number of records to return per request.
    * @type {number}
    * @memberof InboundRulesApiApiListTriggers
    */
    readonly count: number
    
    /**
    * Number of records to skip.
    * @type {number}
    * @memberof InboundRulesApiApiListTriggers
    */
    readonly offset: number
    
}

/**
 * InboundRulesApiApiGenerated - object-oriented interface
 * @export
 * @class InboundRulesApiApiGenerated
 * @extends {BaseAPI}
 */
export class InboundRulesApiApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create an inbound rule trigger
     * @param {InboundRulesApiApiCreateTriggerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboundRulesApiApiGenerated
     */
    public createTrigger(requestParameters: InboundRulesApiApiCreateTriggerRequest = {}, options?: AxiosRequestConfig) {
        return InboundRulesApiApiFp(this.configuration).createTrigger(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a single trigger
     * @param {InboundRulesApiApiDeleteSingleTriggerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboundRulesApiApiGenerated
     */
    public deleteSingleTrigger(requestParameters: InboundRulesApiApiDeleteSingleTriggerRequest, options?: AxiosRequestConfig) {
        return InboundRulesApiApiFp(this.configuration).deleteSingleTrigger(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List inbound rule triggers
     * @param {InboundRulesApiApiListTriggersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InboundRulesApiApiGenerated
     */
    public listTriggers(requestParameters: InboundRulesApiApiListTriggersRequest, options?: AxiosRequestConfig) {
        return InboundRulesApiApiFp(this.configuration).listTriggers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
