/* tslint:disable */
/* eslint-disable */
/*
Postmark API

Postmark makes sending and receiving email
incredibly easy.


The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Attachment } from '../models';
// @ts-ignore
import { CreateTemplateRequest } from '../models';
// @ts-ignore
import { EditTemplateRequest } from '../models';
// @ts-ignore
import { EmailWithTemplateRequest } from '../models';
// @ts-ignore
import { MessageHeader } from '../models';
// @ts-ignore
import { SendEmailResponse } from '../models';
// @ts-ignore
import { SendEmailTemplatedBatchRequest } from '../models';
// @ts-ignore
import { StandardPostmarkResponse } from '../models';
// @ts-ignore
import { TemplateValidationRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TemplatesApiApi - axios parameter creator
 * @export
 */
export const TemplatesApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a Template
         * @param {CreateTemplateRequest} createTemplateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTemplate: async (createTemplateRequest: CreateTemplateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createTemplateRequest' is not null or undefined
            assertParamExists('createTemplate', 'createTemplateRequest', createTemplateRequest)
            const localVarPath = `/templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication serverToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Postmark-Server-Token", keyParamName: "serverToken", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createTemplateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/templates',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createTemplateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Template
         * @param {string} templateIdOrAlias The \&#39;TemplateID\&#39; or \&#39;Alias\&#39; value for the Template you wish to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTemplate: async (templateIdOrAlias: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateIdOrAlias' is not null or undefined
            assertParamExists('deleteTemplate', 'templateIdOrAlias', templateIdOrAlias)
            const localVarPath = `/templates/{templateIdOrAlias}`
                .replace(`{${"templateIdOrAlias"}}`, encodeURIComponent(String(templateIdOrAlias !== undefined ? templateIdOrAlias : `-templateIdOrAlias-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication serverToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Postmark-Server-Token", keyParamName: "serverToken", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/templates/{templateIdOrAlias}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a Template
         * @param {string} templateIdOrAlias The \&#39;TemplateID\&#39; or \&#39;Alias\&#39; value for the Template you wish to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTemplateById: async (templateIdOrAlias: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateIdOrAlias' is not null or undefined
            assertParamExists('getTemplateById', 'templateIdOrAlias', templateIdOrAlias)
            const localVarPath = `/templates/{templateIdOrAlias}`
                .replace(`{${"templateIdOrAlias"}}`, encodeURIComponent(String(templateIdOrAlias !== undefined ? templateIdOrAlias : `-templateIdOrAlias-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication serverToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Postmark-Server-Token", keyParamName: "serverToken", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/templates/{templateIdOrAlias}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the Templates associated with this Server
         * @param {number} count The number of Templates to return
         * @param {number} offset The number of Templates to \&quot;skip\&quot; before returning results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTemplates: async (count: number, offset: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'count' is not null or undefined
            assertParamExists('listTemplates', 'count', count)
            // verify required parameter 'offset' is not null or undefined
            assertParamExists('listTemplates', 'offset', offset)
            const localVarPath = `/templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication serverToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Postmark-Server-Token", keyParamName: "serverToken", configuration })
            if (count !== undefined) {
                localVarQueryParameter['Count'] = count;
            }

            if (offset !== undefined) {
                localVarQueryParameter['Offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/templates',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send a batch of email using templates.
         * @param {SendEmailTemplatedBatchRequest} sendEmailTemplatedBatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendBatchWithTemplates: async (sendEmailTemplatedBatchRequest: SendEmailTemplatedBatchRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sendEmailTemplatedBatchRequest' is not null or undefined
            assertParamExists('sendBatchWithTemplates', 'sendEmailTemplatedBatchRequest', sendEmailTemplatedBatchRequest)
            const localVarPath = `/email/batchWithTemplates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication serverToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Postmark-Server-Token", keyParamName: "serverToken", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: sendEmailTemplatedBatchRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/email/batchWithTemplates',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(sendEmailTemplatedBatchRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send an email using a Template
         * @param {EmailWithTemplateRequest} emailWithTemplateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEmailTemplate: async (emailWithTemplateRequest: EmailWithTemplateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'emailWithTemplateRequest' is not null or undefined
            assertParamExists('sendEmailTemplate', 'emailWithTemplateRequest', emailWithTemplateRequest)
            const localVarPath = `/email/withTemplate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication serverToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Postmark-Server-Token", keyParamName: "serverToken", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: emailWithTemplateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/email/withTemplate',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(emailWithTemplateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a Template
         * @param {string} templateIdOrAlias The \&#39;TemplateID\&#39; or \&#39;Alias\&#39; value for the Template you wish to update.
         * @param {EditTemplateRequest} editTemplateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTemplate: async (templateIdOrAlias: string, editTemplateRequest: EditTemplateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateIdOrAlias' is not null or undefined
            assertParamExists('updateTemplate', 'templateIdOrAlias', templateIdOrAlias)
            // verify required parameter 'editTemplateRequest' is not null or undefined
            assertParamExists('updateTemplate', 'editTemplateRequest', editTemplateRequest)
            const localVarPath = `/templates/{templateIdOrAlias}`
                .replace(`{${"templateIdOrAlias"}}`, encodeURIComponent(String(templateIdOrAlias !== undefined ? templateIdOrAlias : `-templateIdOrAlias-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication serverToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Postmark-Server-Token", keyParamName: "serverToken", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: editTemplateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/templates/{templateIdOrAlias}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(editTemplateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Test Template Content
         * @param {TemplateValidationRequest} [templateValidationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateTemplateContent: async (templateValidationRequest?: TemplateValidationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/templates/validate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication serverToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Postmark-Server-Token", keyParamName: "serverToken", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: templateValidationRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/templates/validate',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(templateValidationRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TemplatesApiApi - functional programming interface
 * @export
 */
export const TemplatesApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TemplatesApiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a Template
         * @param {TemplatesApiApiCreateTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTemplate(requestParameters: TemplatesApiApiCreateTemplateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const createTemplateRequest: CreateTemplateRequest = {
                Alias: requestParameters.Alias,
                HtmlBody: requestParameters.HtmlBody,
                Name: requestParameters.Name,
                Subject: requestParameters.Subject,
                TextBody: requestParameters.TextBody
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTemplate(createTemplateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Template
         * @param {TemplatesApiApiDeleteTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTemplate(requestParameters: TemplatesApiApiDeleteTemplateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTemplate(requestParameters.templateIdOrAlias, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a Template
         * @param {TemplatesApiApiGetTemplateByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTemplateById(requestParameters: TemplatesApiApiGetTemplateByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTemplateById(requestParameters.templateIdOrAlias, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the Templates associated with this Server
         * @param {TemplatesApiApiListTemplatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTemplates(requestParameters: TemplatesApiApiListTemplatesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTemplates(requestParameters.count, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Send a batch of email using templates.
         * @param {TemplatesApiApiSendBatchWithTemplatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendBatchWithTemplates(requestParameters: TemplatesApiApiSendBatchWithTemplatesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SendEmailResponse>>> {
            const sendEmailTemplatedBatchRequest: SendEmailTemplatedBatchRequest = {
                Messages: requestParameters.Messages
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendBatchWithTemplates(sendEmailTemplatedBatchRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Send an email using a Template
         * @param {TemplatesApiApiSendEmailTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendEmailTemplate(requestParameters: TemplatesApiApiSendEmailTemplateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SendEmailResponse>> {
            const emailWithTemplateRequest: EmailWithTemplateRequest = {
                Attachments: requestParameters.Attachments,
                Bcc: requestParameters.Bcc,
                Cc: requestParameters.Cc,
                From: requestParameters.From,
                Headers: requestParameters.Headers,
                InlineCss: requestParameters.InlineCss,
                ReplyTo: requestParameters.ReplyTo,
                Tag: requestParameters.Tag,
                TemplateAlias: requestParameters.TemplateAlias,
                TemplateId: requestParameters.TemplateId,
                TemplateModel: requestParameters.TemplateModel,
                To: requestParameters.To,
                TrackLinks: requestParameters.TrackLinks,
                TrackOpens: requestParameters.TrackOpens
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendEmailTemplate(emailWithTemplateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a Template
         * @param {TemplatesApiApiUpdateTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTemplate(requestParameters: TemplatesApiApiUpdateTemplateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const editTemplateRequest: EditTemplateRequest = {
                Alias: requestParameters.Alias,
                HtmlBody: requestParameters.HtmlBody,
                Name: requestParameters.Name,
                Subject: requestParameters.Subject,
                TextBody: requestParameters.TextBody
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTemplate(requestParameters.templateIdOrAlias, editTemplateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Test Template Content
         * @param {TemplatesApiApiValidateTemplateContentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateTemplateContent(requestParameters: TemplatesApiApiValidateTemplateContentRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const templateValidationRequest: TemplateValidationRequest = {
                HtmlBody: requestParameters.HtmlBody,
                InlineCssForHtmlTestRender: requestParameters.InlineCssForHtmlTestRender,
                Subject: requestParameters.Subject,
                TestRenderModel: requestParameters.TestRenderModel,
                TextBody: requestParameters.TextBody
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.validateTemplateContent(templateValidationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TemplatesApiApi - factory interface
 * @export
 */
export const TemplatesApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TemplatesApiApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a Template
         * @param {TemplatesApiApiCreateTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTemplate(requestParameters: TemplatesApiApiCreateTemplateRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.createTemplate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Template
         * @param {TemplatesApiApiDeleteTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTemplate(requestParameters: TemplatesApiApiDeleteTemplateRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.deleteTemplate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a Template
         * @param {TemplatesApiApiGetTemplateByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTemplateById(requestParameters: TemplatesApiApiGetTemplateByIdRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getTemplateById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the Templates associated with this Server
         * @param {TemplatesApiApiListTemplatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTemplates(requestParameters: TemplatesApiApiListTemplatesRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.listTemplates(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send a batch of email using templates.
         * @param {TemplatesApiApiSendBatchWithTemplatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendBatchWithTemplates(requestParameters: TemplatesApiApiSendBatchWithTemplatesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<SendEmailResponse>> {
            return localVarFp.sendBatchWithTemplates(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send an email using a Template
         * @param {TemplatesApiApiSendEmailTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEmailTemplate(requestParameters: TemplatesApiApiSendEmailTemplateRequest, options?: AxiosRequestConfig): AxiosPromise<SendEmailResponse> {
            return localVarFp.sendEmailTemplate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a Template
         * @param {TemplatesApiApiUpdateTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTemplate(requestParameters: TemplatesApiApiUpdateTemplateRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.updateTemplate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Test Template Content
         * @param {TemplatesApiApiValidateTemplateContentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateTemplateContent(requestParameters: TemplatesApiApiValidateTemplateContentRequest = {}, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.validateTemplateContent(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createTemplate operation in TemplatesApiApi.
 * @export
 * @interface TemplatesApiApiCreateTemplateRequest
 */
export type TemplatesApiApiCreateTemplateRequest = {
    
} & CreateTemplateRequest

/**
 * Request parameters for deleteTemplate operation in TemplatesApiApi.
 * @export
 * @interface TemplatesApiApiDeleteTemplateRequest
 */
export type TemplatesApiApiDeleteTemplateRequest = {
    
    /**
    * The \'TemplateID\' or \'Alias\' value for the Template you wish to delete.
    * @type {string}
    * @memberof TemplatesApiApiDeleteTemplate
    */
    readonly templateIdOrAlias: string
    
}

/**
 * Request parameters for getTemplateById operation in TemplatesApiApi.
 * @export
 * @interface TemplatesApiApiGetTemplateByIdRequest
 */
export type TemplatesApiApiGetTemplateByIdRequest = {
    
    /**
    * The \'TemplateID\' or \'Alias\' value for the Template you wish to retrieve.
    * @type {string}
    * @memberof TemplatesApiApiGetTemplateById
    */
    readonly templateIdOrAlias: string
    
}

/**
 * Request parameters for listTemplates operation in TemplatesApiApi.
 * @export
 * @interface TemplatesApiApiListTemplatesRequest
 */
export type TemplatesApiApiListTemplatesRequest = {
    
    /**
    * The number of Templates to return
    * @type {number}
    * @memberof TemplatesApiApiListTemplates
    */
    readonly count: number
    
    /**
    * The number of Templates to \"skip\" before returning results.
    * @type {number}
    * @memberof TemplatesApiApiListTemplates
    */
    readonly offset: number
    
}

/**
 * Request parameters for sendBatchWithTemplates operation in TemplatesApiApi.
 * @export
 * @interface TemplatesApiApiSendBatchWithTemplatesRequest
 */
export type TemplatesApiApiSendBatchWithTemplatesRequest = {
    
} & SendEmailTemplatedBatchRequest

/**
 * Request parameters for sendEmailTemplate operation in TemplatesApiApi.
 * @export
 * @interface TemplatesApiApiSendEmailTemplateRequest
 */
export type TemplatesApiApiSendEmailTemplateRequest = {
    
} & EmailWithTemplateRequest

/**
 * Request parameters for updateTemplate operation in TemplatesApiApi.
 * @export
 * @interface TemplatesApiApiUpdateTemplateRequest
 */
export type TemplatesApiApiUpdateTemplateRequest = {
    
    /**
    * The \'TemplateID\' or \'Alias\' value for the Template you wish to update.
    * @type {string}
    * @memberof TemplatesApiApiUpdateTemplate
    */
    readonly templateIdOrAlias: string
    
} & EditTemplateRequest

/**
 * Request parameters for validateTemplateContent operation in TemplatesApiApi.
 * @export
 * @interface TemplatesApiApiValidateTemplateContentRequest
 */
export type TemplatesApiApiValidateTemplateContentRequest = {
    
} & TemplateValidationRequest

/**
 * TemplatesApiApiGenerated - object-oriented interface
 * @export
 * @class TemplatesApiApiGenerated
 * @extends {BaseAPI}
 */
export class TemplatesApiApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create a Template
     * @param {TemplatesApiApiCreateTemplateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApiApiGenerated
     */
    public createTemplate(requestParameters: TemplatesApiApiCreateTemplateRequest, options?: AxiosRequestConfig) {
        return TemplatesApiApiFp(this.configuration).createTemplate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Template
     * @param {TemplatesApiApiDeleteTemplateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApiApiGenerated
     */
    public deleteTemplate(requestParameters: TemplatesApiApiDeleteTemplateRequest, options?: AxiosRequestConfig) {
        return TemplatesApiApiFp(this.configuration).deleteTemplate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a Template
     * @param {TemplatesApiApiGetTemplateByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApiApiGenerated
     */
    public getTemplateById(requestParameters: TemplatesApiApiGetTemplateByIdRequest, options?: AxiosRequestConfig) {
        return TemplatesApiApiFp(this.configuration).getTemplateById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the Templates associated with this Server
     * @param {TemplatesApiApiListTemplatesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApiApiGenerated
     */
    public listTemplates(requestParameters: TemplatesApiApiListTemplatesRequest, options?: AxiosRequestConfig) {
        return TemplatesApiApiFp(this.configuration).listTemplates(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send a batch of email using templates.
     * @param {TemplatesApiApiSendBatchWithTemplatesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApiApiGenerated
     */
    public sendBatchWithTemplates(requestParameters: TemplatesApiApiSendBatchWithTemplatesRequest, options?: AxiosRequestConfig) {
        return TemplatesApiApiFp(this.configuration).sendBatchWithTemplates(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send an email using a Template
     * @param {TemplatesApiApiSendEmailTemplateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApiApiGenerated
     */
    public sendEmailTemplate(requestParameters: TemplatesApiApiSendEmailTemplateRequest, options?: AxiosRequestConfig) {
        return TemplatesApiApiFp(this.configuration).sendEmailTemplate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a Template
     * @param {TemplatesApiApiUpdateTemplateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApiApiGenerated
     */
    public updateTemplate(requestParameters: TemplatesApiApiUpdateTemplateRequest, options?: AxiosRequestConfig) {
        return TemplatesApiApiFp(this.configuration).updateTemplate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Test Template Content
     * @param {TemplatesApiApiValidateTemplateContentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApiApiGenerated
     */
    public validateTemplateContent(requestParameters: TemplatesApiApiValidateTemplateContentRequest = {}, options?: AxiosRequestConfig) {
        return TemplatesApiApiFp(this.configuration).validateTemplateContent(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
