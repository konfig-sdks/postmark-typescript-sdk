/* tslint:disable */
/* eslint-disable */
/*
Postmark API

Postmark makes sending and receiving email
incredibly easy.


The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { OutboundOverviewStatsResponse } from '../models';
// @ts-ignore
import { SentCountsResponse } from '../models';
// @ts-ignore
import { StandardPostmarkResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * StatsApiApi - axios parameter creator
 * @export
 */
export const StatsApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get bounce counts
         * @param {string} [tag] Filter by tag
         * @param {string | Date} [fromdate] Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60;
         * @param {string | Date} [todate] Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBounceCounts: async (tag?: string, fromdate?: string | Date, todate?: string | Date, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/stats/outbound/bounces`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication serverToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Postmark-Server-Token", keyParamName: "serverToken", configuration })
            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (fromdate !== undefined) {
                localVarQueryParameter['fromdate'] = (fromdate as any instanceof Date) ?
                    (fromdate as any).toISOString().substr(0,10) :
                    fromdate;
            }

            if (todate !== undefined) {
                localVarQueryParameter['todate'] = (todate as any instanceof Date) ?
                    (todate as any).toISOString().substr(0,10) :
                    todate;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/stats/outbound/bounces',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get browser plaform usage
         * @param {string} [tag] Filter by tag
         * @param {string | Date} [fromdate] Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60;
         * @param {string | Date} [todate] Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrowserPlatformUsage: async (tag?: string, fromdate?: string | Date, todate?: string | Date, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/stats/outbound/clicks/platforms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication serverToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Postmark-Server-Token", keyParamName: "serverToken", configuration })
            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (fromdate !== undefined) {
                localVarQueryParameter['fromdate'] = (fromdate as any instanceof Date) ?
                    (fromdate as any).toISOString().substr(0,10) :
                    fromdate;
            }

            if (todate !== undefined) {
                localVarQueryParameter['todate'] = (todate as any instanceof Date) ?
                    (todate as any).toISOString().substr(0,10) :
                    todate;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/stats/outbound/clicks/platforms',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get email client usage
         * @param {string} [tag] Filter by tag
         * @param {string | Date} [fromdate] Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60;
         * @param {string | Date} [todate] Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailClientUsage: async (tag?: string, fromdate?: string | Date, todate?: string | Date, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/stats/outbound/opens/emailclients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication serverToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Postmark-Server-Token", keyParamName: "serverToken", configuration })
            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (fromdate !== undefined) {
                localVarQueryParameter['fromdate'] = (fromdate as any instanceof Date) ?
                    (fromdate as any).toISOString().substr(0,10) :
                    fromdate;
            }

            if (todate !== undefined) {
                localVarQueryParameter['todate'] = (todate as any instanceof Date) ?
                    (todate as any).toISOString().substr(0,10) :
                    todate;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/stats/outbound/opens/emailclients',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get email open counts
         * @param {string} [tag] Filter by tag
         * @param {string | Date} [fromdate] Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60;
         * @param {string | Date} [todate] Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailOpenCounts: async (tag?: string, fromdate?: string | Date, todate?: string | Date, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/stats/outbound/opens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication serverToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Postmark-Server-Token", keyParamName: "serverToken", configuration })
            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (fromdate !== undefined) {
                localVarQueryParameter['fromdate'] = (fromdate as any instanceof Date) ?
                    (fromdate as any).toISOString().substr(0,10) :
                    fromdate;
            }

            if (todate !== undefined) {
                localVarQueryParameter['todate'] = (todate as any instanceof Date) ?
                    (todate as any).toISOString().substr(0,10) :
                    todate;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/stats/outbound/opens',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get email platform usage
         * @param {string} [tag] Filter by tag
         * @param {string | Date} [fromdate] Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60;
         * @param {string | Date} [todate] Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailPlatformUsage: async (tag?: string, fromdate?: string | Date, todate?: string | Date, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/stats/outbound/opens/platforms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication serverToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Postmark-Server-Token", keyParamName: "serverToken", configuration })
            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (fromdate !== undefined) {
                localVarQueryParameter['fromdate'] = (fromdate as any instanceof Date) ?
                    (fromdate as any).toISOString().substr(0,10) :
                    fromdate;
            }

            if (todate !== undefined) {
                localVarQueryParameter['todate'] = (todate as any instanceof Date) ?
                    (todate as any).toISOString().substr(0,10) :
                    todate;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/stats/outbound/opens/platforms',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get click counts
         * @param {string} [tag] Filter by tag
         * @param {string | Date} [fromdate] Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60;
         * @param {string | Date} [todate] Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOutboundClickCounts: async (tag?: string, fromdate?: string | Date, todate?: string | Date, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/stats/outbound/clicks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication serverToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Postmark-Server-Token", keyParamName: "serverToken", configuration })
            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (fromdate !== undefined) {
                localVarQueryParameter['fromdate'] = (fromdate as any instanceof Date) ?
                    (fromdate as any).toISOString().substr(0,10) :
                    fromdate;
            }

            if (todate !== undefined) {
                localVarQueryParameter['todate'] = (todate as any instanceof Date) ?
                    (todate as any).toISOString().substr(0,10) :
                    todate;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/stats/outbound/clicks',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get browser usage by family
         * @param {string} [tag] Filter by tag
         * @param {string | Date} [fromdate] Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60;
         * @param {string | Date} [todate] Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOutboundClicksBrowserFamilies: async (tag?: string, fromdate?: string | Date, todate?: string | Date, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/stats/outbound/clicks/browserfamilies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication serverToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Postmark-Server-Token", keyParamName: "serverToken", configuration })
            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (fromdate !== undefined) {
                localVarQueryParameter['fromdate'] = (fromdate as any instanceof Date) ?
                    (fromdate as any).toISOString().substr(0,10) :
                    fromdate;
            }

            if (todate !== undefined) {
                localVarQueryParameter['todate'] = (todate as any instanceof Date) ?
                    (todate as any).toISOString().substr(0,10) :
                    todate;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/stats/outbound/clicks/browserfamilies',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get clicks by body location
         * @param {string} [tag] Filter by tag
         * @param {string | Date} [fromdate] Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60;
         * @param {string | Date} [todate] Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOutboundClicksLocation: async (tag?: string, fromdate?: string | Date, todate?: string | Date, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/stats/outbound/clicks/location`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication serverToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Postmark-Server-Token", keyParamName: "serverToken", configuration })
            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (fromdate !== undefined) {
                localVarQueryParameter['fromdate'] = (fromdate as any instanceof Date) ?
                    (fromdate as any).toISOString().substr(0,10) :
                    fromdate;
            }

            if (todate !== undefined) {
                localVarQueryParameter['todate'] = (todate as any instanceof Date) ?
                    (todate as any).toISOString().substr(0,10) :
                    todate;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/stats/outbound/clicks/location',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get outbound overview
         * @param {string} [tag] Filter by tag
         * @param {string | Date} [fromdate] Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60;
         * @param {string | Date} [todate] Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOutboundOverview: async (tag?: string, fromdate?: string | Date, todate?: string | Date, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/stats/outbound`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication serverToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Postmark-Server-Token", keyParamName: "serverToken", configuration })
            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (fromdate !== undefined) {
                localVarQueryParameter['fromdate'] = (fromdate as any instanceof Date) ?
                    (fromdate as any).toISOString().substr(0,10) :
                    fromdate;
            }

            if (todate !== undefined) {
                localVarQueryParameter['todate'] = (todate as any instanceof Date) ?
                    (todate as any).toISOString().substr(0,10) :
                    todate;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/stats/outbound',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get sent counts
         * @param {string} [tag] Filter by tag
         * @param {string | Date} [fromdate] Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60;
         * @param {string | Date} [todate] Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSentCounts: async (tag?: string, fromdate?: string | Date, todate?: string | Date, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/stats/outbound/sends`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication serverToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Postmark-Server-Token", keyParamName: "serverToken", configuration })
            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (fromdate !== undefined) {
                localVarQueryParameter['fromdate'] = (fromdate as any instanceof Date) ?
                    (fromdate as any).toISOString().substr(0,10) :
                    fromdate;
            }

            if (todate !== undefined) {
                localVarQueryParameter['todate'] = (todate as any instanceof Date) ?
                    (todate as any).toISOString().substr(0,10) :
                    todate;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/stats/outbound/sends',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get spam complaints
         * @param {string} [tag] Filter by tag
         * @param {string | Date} [fromdate] Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60;
         * @param {string | Date} [todate] Filter stats up to the date specified. e.g. &#x60;2014-02-01&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpamComplaints: async (tag?: string, fromdate?: string | Date, todate?: string | Date, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/stats/outbound/spam`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication serverToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Postmark-Server-Token", keyParamName: "serverToken", configuration })
            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (fromdate !== undefined) {
                localVarQueryParameter['fromdate'] = (fromdate as any instanceof Date) ?
                    (fromdate as any).toISOString().substr(0,10) :
                    fromdate;
            }

            if (todate !== undefined) {
                localVarQueryParameter['todate'] = (todate as any instanceof Date) ?
                    (todate as any).toISOString().substr(0,10) :
                    todate;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/stats/outbound/spam',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get tracked email counts
         * @param {string} [tag] Filter by tag
         * @param {string | Date} [fromdate] Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60;
         * @param {string | Date} [todate] Filter stats starting from the date specified. e.g. &#x60;2014-01-01&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrackedEmailCounts: async (tag?: string, fromdate?: string | Date, todate?: string | Date, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/stats/outbound/tracked`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication serverToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Postmark-Server-Token", keyParamName: "serverToken", configuration })
            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (fromdate !== undefined) {
                localVarQueryParameter['fromdate'] = (fromdate as any instanceof Date) ?
                    (fromdate as any).toISOString().substr(0,10) :
                    fromdate;
            }

            if (todate !== undefined) {
                localVarQueryParameter['todate'] = (todate as any instanceof Date) ?
                    (todate as any).toISOString().substr(0,10) :
                    todate;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/stats/outbound/tracked',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StatsApiApi - functional programming interface
 * @export
 */
export const StatsApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StatsApiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get bounce counts
         * @param {StatsApiApiGetBounceCountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBounceCounts(requestParameters: StatsApiApiGetBounceCountsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBounceCounts(requestParameters.tag, requestParameters.fromdate, requestParameters.todate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get browser plaform usage
         * @param {StatsApiApiGetBrowserPlatformUsageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBrowserPlatformUsage(requestParameters: StatsApiApiGetBrowserPlatformUsageRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBrowserPlatformUsage(requestParameters.tag, requestParameters.fromdate, requestParameters.todate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get email client usage
         * @param {StatsApiApiGetEmailClientUsageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmailClientUsage(requestParameters: StatsApiApiGetEmailClientUsageRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmailClientUsage(requestParameters.tag, requestParameters.fromdate, requestParameters.todate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get email open counts
         * @param {StatsApiApiGetEmailOpenCountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmailOpenCounts(requestParameters: StatsApiApiGetEmailOpenCountsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmailOpenCounts(requestParameters.tag, requestParameters.fromdate, requestParameters.todate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get email platform usage
         * @param {StatsApiApiGetEmailPlatformUsageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmailPlatformUsage(requestParameters: StatsApiApiGetEmailPlatformUsageRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmailPlatformUsage(requestParameters.tag, requestParameters.fromdate, requestParameters.todate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get click counts
         * @param {StatsApiApiGetOutboundClickCountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOutboundClickCounts(requestParameters: StatsApiApiGetOutboundClickCountsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOutboundClickCounts(requestParameters.tag, requestParameters.fromdate, requestParameters.todate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get browser usage by family
         * @param {StatsApiApiGetOutboundClicksBrowserFamiliesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOutboundClicksBrowserFamilies(requestParameters: StatsApiApiGetOutboundClicksBrowserFamiliesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOutboundClicksBrowserFamilies(requestParameters.tag, requestParameters.fromdate, requestParameters.todate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get clicks by body location
         * @param {StatsApiApiGetOutboundClicksLocationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOutboundClicksLocation(requestParameters: StatsApiApiGetOutboundClicksLocationRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOutboundClicksLocation(requestParameters.tag, requestParameters.fromdate, requestParameters.todate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get outbound overview
         * @param {StatsApiApiGetOutboundOverviewRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOutboundOverview(requestParameters: StatsApiApiGetOutboundOverviewRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OutboundOverviewStatsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOutboundOverview(requestParameters.tag, requestParameters.fromdate, requestParameters.todate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get sent counts
         * @param {StatsApiApiGetSentCountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSentCounts(requestParameters: StatsApiApiGetSentCountsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SentCountsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSentCounts(requestParameters.tag, requestParameters.fromdate, requestParameters.todate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get spam complaints
         * @param {StatsApiApiGetSpamComplaintsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpamComplaints(requestParameters: StatsApiApiGetSpamComplaintsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpamComplaints(requestParameters.tag, requestParameters.fromdate, requestParameters.todate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get tracked email counts
         * @param {StatsApiApiGetTrackedEmailCountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTrackedEmailCounts(requestParameters: StatsApiApiGetTrackedEmailCountsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTrackedEmailCounts(requestParameters.tag, requestParameters.fromdate, requestParameters.todate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StatsApiApi - factory interface
 * @export
 */
export const StatsApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StatsApiApiFp(configuration)
    return {
        /**
         * 
         * @summary Get bounce counts
         * @param {StatsApiApiGetBounceCountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBounceCounts(requestParameters: StatsApiApiGetBounceCountsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getBounceCounts(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get browser plaform usage
         * @param {StatsApiApiGetBrowserPlatformUsageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrowserPlatformUsage(requestParameters: StatsApiApiGetBrowserPlatformUsageRequest = {}, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getBrowserPlatformUsage(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get email client usage
         * @param {StatsApiApiGetEmailClientUsageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailClientUsage(requestParameters: StatsApiApiGetEmailClientUsageRequest = {}, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getEmailClientUsage(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get email open counts
         * @param {StatsApiApiGetEmailOpenCountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailOpenCounts(requestParameters: StatsApiApiGetEmailOpenCountsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getEmailOpenCounts(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get email platform usage
         * @param {StatsApiApiGetEmailPlatformUsageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailPlatformUsage(requestParameters: StatsApiApiGetEmailPlatformUsageRequest = {}, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getEmailPlatformUsage(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get click counts
         * @param {StatsApiApiGetOutboundClickCountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOutboundClickCounts(requestParameters: StatsApiApiGetOutboundClickCountsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getOutboundClickCounts(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get browser usage by family
         * @param {StatsApiApiGetOutboundClicksBrowserFamiliesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOutboundClicksBrowserFamilies(requestParameters: StatsApiApiGetOutboundClicksBrowserFamiliesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getOutboundClicksBrowserFamilies(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get clicks by body location
         * @param {StatsApiApiGetOutboundClicksLocationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOutboundClicksLocation(requestParameters: StatsApiApiGetOutboundClicksLocationRequest = {}, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getOutboundClicksLocation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get outbound overview
         * @param {StatsApiApiGetOutboundOverviewRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOutboundOverview(requestParameters: StatsApiApiGetOutboundOverviewRequest = {}, options?: AxiosRequestConfig): AxiosPromise<OutboundOverviewStatsResponse> {
            return localVarFp.getOutboundOverview(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get sent counts
         * @param {StatsApiApiGetSentCountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSentCounts(requestParameters: StatsApiApiGetSentCountsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<SentCountsResponse> {
            return localVarFp.getSentCounts(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get spam complaints
         * @param {StatsApiApiGetSpamComplaintsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpamComplaints(requestParameters: StatsApiApiGetSpamComplaintsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getSpamComplaints(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get tracked email counts
         * @param {StatsApiApiGetTrackedEmailCountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrackedEmailCounts(requestParameters: StatsApiApiGetTrackedEmailCountsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getTrackedEmailCounts(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getBounceCounts operation in StatsApiApi.
 * @export
 * @interface StatsApiApiGetBounceCountsRequest
 */
export type StatsApiApiGetBounceCountsRequest = {
    
    /**
    * Filter by tag
    * @type {string}
    * @memberof StatsApiApiGetBounceCounts
    */
    readonly tag?: string
    
    /**
    * Filter stats starting from the date specified. e.g. `2014-01-01`
    * @type {string | Date}
    * @memberof StatsApiApiGetBounceCounts
    */
    readonly fromdate?: string | Date
    
    /**
    * Filter stats up to the date specified. e.g. `2014-02-01`
    * @type {string | Date}
    * @memberof StatsApiApiGetBounceCounts
    */
    readonly todate?: string | Date
    
}

/**
 * Request parameters for getBrowserPlatformUsage operation in StatsApiApi.
 * @export
 * @interface StatsApiApiGetBrowserPlatformUsageRequest
 */
export type StatsApiApiGetBrowserPlatformUsageRequest = {
    
    /**
    * Filter by tag
    * @type {string}
    * @memberof StatsApiApiGetBrowserPlatformUsage
    */
    readonly tag?: string
    
    /**
    * Filter stats starting from the date specified. e.g. `2014-01-01`
    * @type {string | Date}
    * @memberof StatsApiApiGetBrowserPlatformUsage
    */
    readonly fromdate?: string | Date
    
    /**
    * Filter stats up to the date specified. e.g. `2014-02-01`
    * @type {string | Date}
    * @memberof StatsApiApiGetBrowserPlatformUsage
    */
    readonly todate?: string | Date
    
}

/**
 * Request parameters for getEmailClientUsage operation in StatsApiApi.
 * @export
 * @interface StatsApiApiGetEmailClientUsageRequest
 */
export type StatsApiApiGetEmailClientUsageRequest = {
    
    /**
    * Filter by tag
    * @type {string}
    * @memberof StatsApiApiGetEmailClientUsage
    */
    readonly tag?: string
    
    /**
    * Filter stats starting from the date specified. e.g. `2014-01-01`
    * @type {string | Date}
    * @memberof StatsApiApiGetEmailClientUsage
    */
    readonly fromdate?: string | Date
    
    /**
    * Filter stats up to the date specified. e.g. `2014-02-01`
    * @type {string | Date}
    * @memberof StatsApiApiGetEmailClientUsage
    */
    readonly todate?: string | Date
    
}

/**
 * Request parameters for getEmailOpenCounts operation in StatsApiApi.
 * @export
 * @interface StatsApiApiGetEmailOpenCountsRequest
 */
export type StatsApiApiGetEmailOpenCountsRequest = {
    
    /**
    * Filter by tag
    * @type {string}
    * @memberof StatsApiApiGetEmailOpenCounts
    */
    readonly tag?: string
    
    /**
    * Filter stats starting from the date specified. e.g. `2014-01-01`
    * @type {string | Date}
    * @memberof StatsApiApiGetEmailOpenCounts
    */
    readonly fromdate?: string | Date
    
    /**
    * Filter stats up to the date specified. e.g. `2014-02-01`
    * @type {string | Date}
    * @memberof StatsApiApiGetEmailOpenCounts
    */
    readonly todate?: string | Date
    
}

/**
 * Request parameters for getEmailPlatformUsage operation in StatsApiApi.
 * @export
 * @interface StatsApiApiGetEmailPlatformUsageRequest
 */
export type StatsApiApiGetEmailPlatformUsageRequest = {
    
    /**
    * Filter by tag
    * @type {string}
    * @memberof StatsApiApiGetEmailPlatformUsage
    */
    readonly tag?: string
    
    /**
    * Filter stats starting from the date specified. e.g. `2014-01-01`
    * @type {string | Date}
    * @memberof StatsApiApiGetEmailPlatformUsage
    */
    readonly fromdate?: string | Date
    
    /**
    * Filter stats up to the date specified. e.g. `2014-02-01`
    * @type {string | Date}
    * @memberof StatsApiApiGetEmailPlatformUsage
    */
    readonly todate?: string | Date
    
}

/**
 * Request parameters for getOutboundClickCounts operation in StatsApiApi.
 * @export
 * @interface StatsApiApiGetOutboundClickCountsRequest
 */
export type StatsApiApiGetOutboundClickCountsRequest = {
    
    /**
    * Filter by tag
    * @type {string}
    * @memberof StatsApiApiGetOutboundClickCounts
    */
    readonly tag?: string
    
    /**
    * Filter stats starting from the date specified. e.g. `2014-01-01`
    * @type {string | Date}
    * @memberof StatsApiApiGetOutboundClickCounts
    */
    readonly fromdate?: string | Date
    
    /**
    * Filter stats up to the date specified. e.g. `2014-02-01`
    * @type {string | Date}
    * @memberof StatsApiApiGetOutboundClickCounts
    */
    readonly todate?: string | Date
    
}

/**
 * Request parameters for getOutboundClicksBrowserFamilies operation in StatsApiApi.
 * @export
 * @interface StatsApiApiGetOutboundClicksBrowserFamiliesRequest
 */
export type StatsApiApiGetOutboundClicksBrowserFamiliesRequest = {
    
    /**
    * Filter by tag
    * @type {string}
    * @memberof StatsApiApiGetOutboundClicksBrowserFamilies
    */
    readonly tag?: string
    
    /**
    * Filter stats starting from the date specified. e.g. `2014-01-01`
    * @type {string | Date}
    * @memberof StatsApiApiGetOutboundClicksBrowserFamilies
    */
    readonly fromdate?: string | Date
    
    /**
    * Filter stats up to the date specified. e.g. `2014-02-01`
    * @type {string | Date}
    * @memberof StatsApiApiGetOutboundClicksBrowserFamilies
    */
    readonly todate?: string | Date
    
}

/**
 * Request parameters for getOutboundClicksLocation operation in StatsApiApi.
 * @export
 * @interface StatsApiApiGetOutboundClicksLocationRequest
 */
export type StatsApiApiGetOutboundClicksLocationRequest = {
    
    /**
    * Filter by tag
    * @type {string}
    * @memberof StatsApiApiGetOutboundClicksLocation
    */
    readonly tag?: string
    
    /**
    * Filter stats starting from the date specified. e.g. `2014-01-01`
    * @type {string | Date}
    * @memberof StatsApiApiGetOutboundClicksLocation
    */
    readonly fromdate?: string | Date
    
    /**
    * Filter stats up to the date specified. e.g. `2014-02-01`
    * @type {string | Date}
    * @memberof StatsApiApiGetOutboundClicksLocation
    */
    readonly todate?: string | Date
    
}

/**
 * Request parameters for getOutboundOverview operation in StatsApiApi.
 * @export
 * @interface StatsApiApiGetOutboundOverviewRequest
 */
export type StatsApiApiGetOutboundOverviewRequest = {
    
    /**
    * Filter by tag
    * @type {string}
    * @memberof StatsApiApiGetOutboundOverview
    */
    readonly tag?: string
    
    /**
    * Filter stats starting from the date specified. e.g. `2014-01-01`
    * @type {string | Date}
    * @memberof StatsApiApiGetOutboundOverview
    */
    readonly fromdate?: string | Date
    
    /**
    * Filter stats up to the date specified. e.g. `2014-02-01`
    * @type {string | Date}
    * @memberof StatsApiApiGetOutboundOverview
    */
    readonly todate?: string | Date
    
}

/**
 * Request parameters for getSentCounts operation in StatsApiApi.
 * @export
 * @interface StatsApiApiGetSentCountsRequest
 */
export type StatsApiApiGetSentCountsRequest = {
    
    /**
    * Filter by tag
    * @type {string}
    * @memberof StatsApiApiGetSentCounts
    */
    readonly tag?: string
    
    /**
    * Filter stats starting from the date specified. e.g. `2014-01-01`
    * @type {string | Date}
    * @memberof StatsApiApiGetSentCounts
    */
    readonly fromdate?: string | Date
    
    /**
    * Filter stats up to the date specified. e.g. `2014-02-01`
    * @type {string | Date}
    * @memberof StatsApiApiGetSentCounts
    */
    readonly todate?: string | Date
    
}

/**
 * Request parameters for getSpamComplaints operation in StatsApiApi.
 * @export
 * @interface StatsApiApiGetSpamComplaintsRequest
 */
export type StatsApiApiGetSpamComplaintsRequest = {
    
    /**
    * Filter by tag
    * @type {string}
    * @memberof StatsApiApiGetSpamComplaints
    */
    readonly tag?: string
    
    /**
    * Filter stats starting from the date specified. e.g. `2014-01-01`
    * @type {string | Date}
    * @memberof StatsApiApiGetSpamComplaints
    */
    readonly fromdate?: string | Date
    
    /**
    * Filter stats up to the date specified. e.g. `2014-02-01`
    * @type {string | Date}
    * @memberof StatsApiApiGetSpamComplaints
    */
    readonly todate?: string | Date
    
}

/**
 * Request parameters for getTrackedEmailCounts operation in StatsApiApi.
 * @export
 * @interface StatsApiApiGetTrackedEmailCountsRequest
 */
export type StatsApiApiGetTrackedEmailCountsRequest = {
    
    /**
    * Filter by tag
    * @type {string}
    * @memberof StatsApiApiGetTrackedEmailCounts
    */
    readonly tag?: string
    
    /**
    * Filter stats starting from the date specified. e.g. `2014-01-01`
    * @type {string | Date}
    * @memberof StatsApiApiGetTrackedEmailCounts
    */
    readonly fromdate?: string | Date
    
    /**
    * Filter stats starting from the date specified. e.g. `2014-01-01`
    * @type {string | Date}
    * @memberof StatsApiApiGetTrackedEmailCounts
    */
    readonly todate?: string | Date
    
}

/**
 * StatsApiApiGenerated - object-oriented interface
 * @export
 * @class StatsApiApiGenerated
 * @extends {BaseAPI}
 */
export class StatsApiApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Get bounce counts
     * @param {StatsApiApiGetBounceCountsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatsApiApiGenerated
     */
    public getBounceCounts(requestParameters: StatsApiApiGetBounceCountsRequest = {}, options?: AxiosRequestConfig) {
        return StatsApiApiFp(this.configuration).getBounceCounts(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get browser plaform usage
     * @param {StatsApiApiGetBrowserPlatformUsageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatsApiApiGenerated
     */
    public getBrowserPlatformUsage(requestParameters: StatsApiApiGetBrowserPlatformUsageRequest = {}, options?: AxiosRequestConfig) {
        return StatsApiApiFp(this.configuration).getBrowserPlatformUsage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get email client usage
     * @param {StatsApiApiGetEmailClientUsageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatsApiApiGenerated
     */
    public getEmailClientUsage(requestParameters: StatsApiApiGetEmailClientUsageRequest = {}, options?: AxiosRequestConfig) {
        return StatsApiApiFp(this.configuration).getEmailClientUsage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get email open counts
     * @param {StatsApiApiGetEmailOpenCountsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatsApiApiGenerated
     */
    public getEmailOpenCounts(requestParameters: StatsApiApiGetEmailOpenCountsRequest = {}, options?: AxiosRequestConfig) {
        return StatsApiApiFp(this.configuration).getEmailOpenCounts(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get email platform usage
     * @param {StatsApiApiGetEmailPlatformUsageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatsApiApiGenerated
     */
    public getEmailPlatformUsage(requestParameters: StatsApiApiGetEmailPlatformUsageRequest = {}, options?: AxiosRequestConfig) {
        return StatsApiApiFp(this.configuration).getEmailPlatformUsage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get click counts
     * @param {StatsApiApiGetOutboundClickCountsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatsApiApiGenerated
     */
    public getOutboundClickCounts(requestParameters: StatsApiApiGetOutboundClickCountsRequest = {}, options?: AxiosRequestConfig) {
        return StatsApiApiFp(this.configuration).getOutboundClickCounts(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get browser usage by family
     * @param {StatsApiApiGetOutboundClicksBrowserFamiliesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatsApiApiGenerated
     */
    public getOutboundClicksBrowserFamilies(requestParameters: StatsApiApiGetOutboundClicksBrowserFamiliesRequest = {}, options?: AxiosRequestConfig) {
        return StatsApiApiFp(this.configuration).getOutboundClicksBrowserFamilies(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get clicks by body location
     * @param {StatsApiApiGetOutboundClicksLocationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatsApiApiGenerated
     */
    public getOutboundClicksLocation(requestParameters: StatsApiApiGetOutboundClicksLocationRequest = {}, options?: AxiosRequestConfig) {
        return StatsApiApiFp(this.configuration).getOutboundClicksLocation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get outbound overview
     * @param {StatsApiApiGetOutboundOverviewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatsApiApiGenerated
     */
    public getOutboundOverview(requestParameters: StatsApiApiGetOutboundOverviewRequest = {}, options?: AxiosRequestConfig) {
        return StatsApiApiFp(this.configuration).getOutboundOverview(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get sent counts
     * @param {StatsApiApiGetSentCountsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatsApiApiGenerated
     */
    public getSentCounts(requestParameters: StatsApiApiGetSentCountsRequest = {}, options?: AxiosRequestConfig) {
        return StatsApiApiFp(this.configuration).getSentCounts(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get spam complaints
     * @param {StatsApiApiGetSpamComplaintsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatsApiApiGenerated
     */
    public getSpamComplaints(requestParameters: StatsApiApiGetSpamComplaintsRequest = {}, options?: AxiosRequestConfig) {
        return StatsApiApiFp(this.configuration).getSpamComplaints(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get tracked email counts
     * @param {StatsApiApiGetTrackedEmailCountsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatsApiApiGenerated
     */
    public getTrackedEmailCounts(requestParameters: StatsApiApiGetTrackedEmailCountsRequest = {}, options?: AxiosRequestConfig) {
        return StatsApiApiFp(this.configuration).getTrackedEmailCounts(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
